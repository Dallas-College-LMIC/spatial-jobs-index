import { describe, it, expect, beforeEach, afterEach, vi } from 'vitest';
import { OccupationCacheService, type OccupationCacheConfig } from '../../../js/services/occupationCacheService';
import { type ICacheService } from '../../../js/services/cacheService';
import { createMockLocalStorage } from '../../utils/testHelpers';
import type { GeoJSONResponse } from '../../../types/api';

// Mock performance.now for consistent testing
if (!global.performance) {
  Object.defineProperty(global, 'performance', {
    value: {
      now: vi.fn(() => Date.now())
    },
    configurable: true
  });
}

// Mock Blob for size estimation
class MockBlob {
  size: number;
  constructor(content: any[]) {
    const str = JSON.stringify(content[0]);
    this.size = str.length > 0 ? str.length * 2 : 1000; // Ensure non-zero size
  }
}

if (!global.Blob || global.Blob.name !== 'MockBlob') {
  global.Blob = MockBlob as any;
}

describe('OccupationCacheService', () => {
  let mockCacheService: ICacheService;
  let occupationCache: OccupationCacheService;
  let mockLocalStorage: Storage;
  const mockGeoJSONData: GeoJSONResponse = {
    type: 'FeatureCollection',
    features: [
      {
        type: 'Feature',
        properties: {
          GEOID: '48001020100',
          openings_2024_zscore: 1.5,
          openings_2024_zscore_color: '#ff0000'
        },
        geometry: {
          type: 'Polygon',
          coordinates: [[[-97.0, 32.8], [-97.0, 32.9], [-97.1, 32.9], [-97.1, 32.8], [-97.0, 32.8]]]
        }
      }
    ]
  };

  beforeEach(() => {
    mockLocalStorage = createMockLocalStorage();
    global.localStorage = mockLocalStorage;
    
    // Create mock cache service with spies
    mockCacheService = {
      get: vi.fn(),
      set: vi.fn(),
      remove: vi.fn(),
      clear: vi.fn()
    };
    
    occupationCache = new OccupationCacheService(mockCacheService);
    vi.clearAllMocks();
  });

  afterEach(() => {
    vi.clearAllTimers();
  });

  describe('constructor', () => {
    it('should initialize with default configuration', () => {
      const cache = new OccupationCacheService(mockCacheService);
      const debugInfo = cache.getDebugInfo();
      
      expect(debugInfo.config.maxMemoryEntries).toBe(50);
      expect(debugInfo.config.maxMemorySize).toBe(500 * 1024 * 1024);
      expect(debugInfo.config.persistentCacheTTL).toBe(7 * 24 * 60 * 60);
      expect(debugInfo.config.enablePersistence).toBe(true);
    });

    it('should initialize with custom configuration', () => {
      const customConfig: Partial<OccupationCacheConfig> = {
        maxMemoryEntries: 100,
        maxMemorySize: 1024 * 1024 * 1024,
        persistentCacheTTL: 24 * 60 * 60,
        enablePersistence: false
      };
      
      const cache = new OccupationCacheService(mockCacheService, customConfig);
      const debugInfo = cache.getDebugInfo();
      
      expect(debugInfo.config.maxMemoryEntries).toBe(100);
      expect(debugInfo.config.maxMemorySize).toBe(1024 * 1024 * 1024);
      expect(debugInfo.config.persistentCacheTTL).toBe(24 * 60 * 60);
      expect(debugInfo.config.enablePersistence).toBe(false);
    });

    it('should initialize cache statistics', () => {
      const stats = occupationCache.getStats();
      
      expect(stats.hits).toBe(0);
      expect(stats.misses).toBe(0);
      expect(stats.evictions).toBe(0);
      expect(stats.memoryUsage).toBe(0);
      expect(stats.totalRequests).toBe(0);
    });

  });

  describe('get', () => {
    it('should return null for cache miss', async () => {
      const result = await occupationCache.get('17-2051');
      
      expect(result).toBeNull();
      
      const stats = occupationCache.getStats();
      expect(stats.misses).toBe(1);
      expect(stats.totalRequests).toBe(1);
    });

    it('should return data from memory cache', async () => {
      // First set data in cache
      await occupationCache.set('17-2051', mockGeoJSONData);
      
      // Then get it
      const result = await occupationCache.get('17-2051');
      
      expect(result).toEqual(mockGeoJSONData);
      
      const stats = occupationCache.getStats();
      expect(stats.hits).toBe(1);
      expect(stats.totalRequests).toBe(1);
    });

    it('should return data from persistent cache and move to memory', async () => {
      // Mock persistent cache to return data
      mockCacheService.get = vi.fn().mockReturnValue(mockGeoJSONData);
      
      const result = await occupationCache.get('17-2051');
      
      expect(result).toEqual(mockGeoJSONData);
      expect(mockCacheService.get).toHaveBeenCalledWith('occupation_17-2051');
      
      const stats = occupationCache.getStats();
      expect(stats.hits).toBe(1);
      expect(stats.totalRequests).toBe(1);
      
      // Verify data was moved to memory cache
      const debugInfo = occupationCache.getDebugInfo();
      expect(debugInfo.memoryEntries).toBe(1);
    });

    it('should update access metadata on memory cache hit', async () => {
      // Set data in cache
      await occupationCache.set('17-2051', mockGeoJSONData);
      
      // Get it multiple times
      await occupationCache.get('17-2051');
      await occupationCache.get('17-2051');
      
      const stats = occupationCache.getStats();
      expect(stats.hits).toBe(2);
      expect(stats.totalRequests).toBe(2);
    });

    it('should skip persistent cache when disabled', async () => {
      const noPersistMockService = {
        get: vi.fn(),
        set: vi.fn(),
        remove: vi.fn(),
        clear: vi.fn()
      };
      
      const cache = new OccupationCacheService(noPersistMockService, { enablePersistence: false });
      
      const result = await cache.get('17-2051');
      
      expect(result).toBeNull();
      expect(noPersistMockService.get).not.toHaveBeenCalled();
    });
  });

  describe('set', () => {
    it('should store data in both memory and persistent cache', async () => {
      await occupationCache.set('17-2051', mockGeoJSONData);
      
      // Verify data is in memory cache
      const result = await occupationCache.get('17-2051');
      expect(result).toEqual(mockGeoJSONData);
      
      // Verify persistent cache was called
      expect(mockCacheService.set).toHaveBeenCalledWith(
        'occupation_17-2051',
        mockGeoJSONData,
        7 * 24 * 60 * 60
      );
      
      const debugInfo = occupationCache.getDebugInfo();
      expect(debugInfo.memoryEntries).toBe(1);
      expect(debugInfo.stats.memoryUsage).toBeGreaterThan(0);
    });

    it('should only store in memory cache when persistence is disabled', async () => {
      const noPersistMockService = {
        get: vi.fn(),
        set: vi.fn(),
        remove: vi.fn(),
        clear: vi.fn()
      };
      
      const cache = new OccupationCacheService(noPersistMockService, { enablePersistence: false });
      
      await cache.set('17-2051', mockGeoJSONData);
      
      expect(noPersistMockService.set).not.toHaveBeenCalled();
      
      const result = await cache.get('17-2051');
      expect(result).toEqual(mockGeoJSONData);
    });

  });

  describe('memory management', () => {
    it('should evict LRU entries when memory limit is reached', async () => {
      // Create cache with small memory limit  
      const smallMockCacheService = {
        get: vi.fn(),
        set: vi.fn(),
        remove: vi.fn(),
        clear: vi.fn()
      };
      
      const cache = new OccupationCacheService(smallMockCacheService, {
        maxMemoryEntries: 2,
        maxMemorySize: 100 // Very small to force eviction
      });
      
      // Add entries that will exceed memory limit
      await cache.set('17-2051', mockGeoJSONData);
      await cache.set('17-2052', mockGeoJSONData);
      await cache.set('17-2053', mockGeoJSONData); // Should trigger eviction
      
      const stats = cache.getStats();
      expect(stats.evictions).toBeGreaterThan(0);
      
      const debugInfo = cache.getDebugInfo();
      expect(debugInfo.memoryEntries).toBeLessThanOrEqual(2);
    });

    it('should evict LRU entries when entry count limit is reached', async () => {
      // Create cache with entry count limit
      const countMockCacheService = {
        get: vi.fn(),
        set: vi.fn(), 
        remove: vi.fn(),
        clear: vi.fn()
      };
      
      const cache = new OccupationCacheService(countMockCacheService, {
        maxMemoryEntries: 2,
        maxMemorySize: 1024 * 1024 * 1024 // Large memory limit
      });
      
      // Add more entries than the limit
      await cache.set('17-2051', mockGeoJSONData);
      await cache.set('17-2052', mockGeoJSONData);
      await cache.set('17-2053', mockGeoJSONData); // Should trigger eviction
      
      const stats = cache.getStats();
      expect(stats.evictions).toBeGreaterThan(0);
      
      const debugInfo = cache.getDebugInfo();
      expect(debugInfo.memoryEntries).toBeLessThanOrEqual(2);
    });

    it('should correctly identify LRU entry for eviction', async () => {
      const lruMockCacheService = {
        get: vi.fn(),
        set: vi.fn(),
        remove: vi.fn(), 
        clear: vi.fn()
      };
      
      const cache = new OccupationCacheService(lruMockCacheService, {
        maxMemoryEntries: 2,
        maxMemorySize: 1024 * 1024 * 1024
      });
      
      // Add two entries
      await cache.set('17-2051', mockGeoJSONData);
      await cache.set('17-2052', mockGeoJSONData);
      
      // Access first entry to make it more recently used
      await cache.get('17-2051');
      
      // Add third entry - should evict the second one (least recently used)
      await cache.set('17-2053', mockGeoJSONData);
      
      // First entry should still be accessible
      const result1 = await cache.get('17-2051');
      expect(result1).toEqual(mockGeoJSONData);
      
      // Second entry should be evicted (but might be in persistent cache)
      // Clear the mock to ensure we're testing memory cache only
      lruMockCacheService.get = vi.fn().mockReturnValue(null);
      const result2 = await cache.get('17-2052');
      expect(result2).toBeNull();
      
      // Third entry should be accessible
      const result3 = await cache.get('17-2053');
      expect(result3).toEqual(mockGeoJSONData);
    });
  });

  describe('size estimation', () => {
    it('should estimate data size correctly', async () => {
      const largeData: GeoJSONResponse = {
        type: 'FeatureCollection',
        features: Array(100).fill(mockGeoJSONData.features[0])
      };
      
      await occupationCache.set('large-occupation', largeData);
      
      const debugInfo = occupationCache.getDebugInfo();
      // Memory usage should be calculated and greater than 0  
      const stats = occupationCache.getStats();
      expect(stats.memoryUsage).toBeGreaterThan(0);
    });

    it('should handle size estimation errors gracefully', async () => {
      // Mock Blob to throw error
      const originalBlob = global.Blob;
      global.Blob = class {
        constructor() {
          throw new Error('Blob error');
        }
      } as any;
      
      // Should not throw and should use fallback estimation
      await expect(occupationCache.set('17-2051', mockGeoJSONData)).resolves.not.toThrow();
      
      global.Blob = originalBlob;
    });
  });

  describe('related occupations', () => {
    it('should identify related occupations based on SOC code', async () => {
      const consoleSpy = vi.spyOn(console, 'log').mockImplementation(() => {});
      
      // Set occupation in major group 17 (Architecture and Engineering)
      await occupationCache.set('17-2051', mockGeoJSONData);
      
      consoleSpy.mockRestore();
    });
  });


  describe('clear', () => {
    it('should clear all caches and reset statistics', async () => {
      // Add some data
      await occupationCache.set('17-2051', mockGeoJSONData);
      await occupationCache.get('17-2051');
      
      // Verify data exists
      let stats = occupationCache.getStats();
      expect(stats.hits).toBe(1);
      expect(stats.totalRequests).toBe(1);
      
      // Clear cache
      occupationCache.clear();
      
      // Verify cache is cleared
      const result = await occupationCache.get('17-2051');
      expect(result).toBeNull();
      
      // Verify statistics are reset
      stats = occupationCache.getStats();
      expect(stats.hits).toBe(0);
      expect(stats.misses).toBe(1); // From the get above
      expect(stats.evictions).toBe(0);
      expect(stats.memoryUsage).toBe(0);
      expect(stats.totalRequests).toBe(1); // From the get above
      
      // Verify persistent cache was cleared
      expect(mockCacheService.clear).toHaveBeenCalled();
    });
  });

  describe('statistics and debugging', () => {
    it('should track cache statistics correctly', async () => {
      // Test hits
      await occupationCache.set('17-2051', mockGeoJSONData);
      await occupationCache.get('17-2051');
      
      // Test misses
      await occupationCache.get('nonexistent');
      
      const stats = occupationCache.getStats();
      expect(stats.hits).toBe(1);
      expect(stats.misses).toBe(1);
      expect(stats.totalRequests).toBe(2);
      expect(stats.memoryUsage).toBeGreaterThan(0);
    });

    it('should provide comprehensive debug information', async () => {
      await occupationCache.set('17-2051', mockGeoJSONData);
      
      const debugInfo = occupationCache.getDebugInfo();
      
      expect(debugInfo).toHaveProperty('memoryEntries');
      expect(debugInfo).toHaveProperty('memoryUsageMB');
      expect(debugInfo).toHaveProperty('hitRate');
      expect(debugInfo).toHaveProperty('config');
      expect(debugInfo).toHaveProperty('stats');
      
      expect(debugInfo.memoryEntries).toBe(1);
      expect(debugInfo.stats.memoryUsage).toBeGreaterThan(0);
      expect(debugInfo.hitRate).toBe(0); // No gets yet
    });

    it('should calculate hit rate correctly', async () => {
      await occupationCache.set('17-2051', mockGeoJSONData);
      
      // 2 hits, 1 miss
      await occupationCache.get('17-2051');
      await occupationCache.get('17-2051');
      await occupationCache.get('nonexistent');
      
      const debugInfo = occupationCache.getDebugInfo();
      expect(debugInfo.hitRate).toBe(67); // 2/3 * 100 = 66.67, rounded to 67
    });

    it('should handle zero requests when calculating hit rate', () => {
      const debugInfo = occupationCache.getDebugInfo();
      expect(debugInfo.hitRate).toBe(0);
    });
  });

  describe('edge cases', () => {
    it('should handle empty GeoJSON data', async () => {
      const emptyData: GeoJSONResponse = {
        type: 'FeatureCollection',
        features: []
      };
      
      await expect(occupationCache.set('empty', emptyData)).resolves.not.toThrow();
      
      const result = await occupationCache.get('empty');
      expect(result).toEqual(emptyData);
    });

    it('should handle very long occupation IDs', async () => {
      const longId = 'very-long-occupation-id-' + 'x'.repeat(1000);
      
      await expect(occupationCache.set(longId, mockGeoJSONData)).resolves.not.toThrow();
      
      const result = await occupationCache.get(longId);
      expect(result).toEqual(mockGeoJSONData);
    });

    it('should handle special characters in occupation IDs', async () => {
      const specialId = '17-2051@#$%^&*()_+{}|:"<>?';
      
      await expect(occupationCache.set(specialId, mockGeoJSONData)).resolves.not.toThrow();
      
      const result = await occupationCache.get(specialId);
      expect(result).toEqual(mockGeoJSONData);
    });
  });
});
