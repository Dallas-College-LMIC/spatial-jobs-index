name: Deploy

# This workflow handles deployment only. All building happens in the Build workflow.
# The Nix commands here pull pre-built artifacts from Cachix rather than building from source.
# Only runs when Build workflow completes on the master branch (not on PRs).

on:
  workflow_run:
    workflows: ["Build"]
    types:
      - completed
    branches:
      - master

jobs:
  changes:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'master' }}
    outputs:
      backend: ${{ steps.filter.outputs.backend }}
      frontend: ${{ steps.filter.outputs.frontend }}
      nix: ${{ steps.filter.outputs.nix }}
      has-changes: ${{ steps.check-changes.outputs.has-changes }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_sha }}

      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            backend:
              - 'backend/**'
            frontend:
              - 'frontend/**'
            nix:
              - 'flake.nix'
              - 'flake.lock'

      - name: Check if deployments are needed
        id: check-changes
        run: |
          if [[ "${{ steps.filter.outputs.backend }}" == "true" || "${{ steps.filter.outputs.frontend }}" == "true" || "${{ steps.filter.outputs.nix }}" == "true" ]]; then
            echo "has-changes=true" >> $GITHUB_OUTPUT
            echo "Deployments needed: backend=${{ steps.filter.outputs.backend }}, frontend=${{ steps.filter.outputs.frontend }}, nix=${{ steps.filter.outputs.nix }}"
          else
            echo "has-changes=false" >> $GITHUB_OUTPUT
            echo "No deployments needed - only docs or other non-deployment files changed"
          fi

  deploy-backend:
    needs: changes
    if: ${{ needs.changes.outputs.backend == 'true' || needs.changes.outputs.nix == 'true' }}
    runs-on: ubuntu-latest
    outputs:
      deploy-status: ${{ steps.set-status.outputs.status }}
    steps:
      - uses: actions/checkout@v4

      - uses: cachix/install-nix-action@v25
        with:
          nix_path: nixpkgs=channel:nixos-unstable

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - uses: cachix/cachix-action@v14
        with:
          name: dallas-college-lmic
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}

      - name: Pull Docker image from cache
        run: |
          # This pulls the pre-built image from Cachix (built in Build workflow)
          nix build .#backend-docker

      - name: Load and push docker image
        run: |
          docker load < result
          docker tag spatial-jobs-index-api:latest ghcr.io/dallas-college-lmic/spatial-jobs-index-api:latest
          docker push ghcr.io/dallas-college-lmic/spatial-jobs-index-api:latest

      - name: Get current running version
        id: get-current
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            cd ~/projects/spatial-jobs-index-api
            # Get current running image tag from docker compose
            CURRENT_TAG=$(docker compose ps --format json | jq -r '.Image' | grep -oE 'spatial-jobs-index-api:.*' | cut -d: -f2 || echo "latest")
            echo "PREVIOUS_TAG=$CURRENT_TAG" > /tmp/deploy-version.txt
            echo "Current running tag: $CURRENT_TAG"

      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            cd ~/projects/spatial-jobs-index-api
            # Tag the new deployment with commit SHA
            export DEPLOY_TAG=${{ github.event.workflow_run.head_sha }}
            docker compose pull
            docker compose up -d
            sleep 10
            if curl -f -s http://localhost:8000/docs > /dev/null; then
              echo "‚úÖ Deployment successful - API is responding"
            else
              echo "‚ùå Health check failed - API may not be running properly"
              docker compose logs --tail=20
              exit 1
            fi
            echo "üöÄ Deployment completed successfully!"

      - name: Set deployment status
        id: set-status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "status=failed" >> $GITHUB_OUTPUT
          fi

  deploy-frontend:
    needs: [changes, deploy-backend]
    # Run if frontend changed AND (backend didn't change OR backend deployed successfully)
    if: |
      (needs.changes.outputs.frontend == 'true' || needs.changes.outputs.nix == 'true') &&
      ((needs.changes.outputs.backend != 'true' && needs.changes.outputs.nix != 'true') || needs.deploy-backend.result == 'success')
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    permissions:
      contents: read
      pages: write
      id-token: write
    concurrency:
      group: "pages"
      cancel-in-progress: false
    steps:
      - uses: actions/checkout@v4

      - uses: cachix/install-nix-action@v25
        with:
          nix_path: nixpkgs=channel:nixos-unstable

      - uses: cachix/cachix-action@v14
        with:
          name: dallas-college-lmic
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}

      - name: Pull frontend build from cache
        run: |
          # This pulls the pre-built frontend from Cachix (built in Build workflow)
          nix build .#frontend

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './result'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  rollback-backend:
    needs: [changes, deploy-backend, deploy-frontend]
    # Only run if backend was deployed, frontend was supposed to deploy but failed
    if: |
      always() &&
      needs.changes.outputs.backend == 'true' &&
      needs.changes.outputs.frontend == 'true' &&
      needs.deploy-backend.result == 'success' &&
      needs.deploy-frontend.result == 'failure'
    runs-on: ubuntu-latest
    steps:
      - name: Rollback backend deployment
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            cd ~/projects/spatial-jobs-index-api
            echo "‚ö†Ô∏è Frontend deployment failed - rolling back backend to previous version"

            # Get the previous tag saved during deployment
            if [ -f /tmp/deploy-version.txt ]; then
              source /tmp/deploy-version.txt
              echo "Rolling back to tag: $PREVIOUS_TAG"

              # Update docker-compose.yml to use previous tag
              export DEPLOY_TAG=$PREVIOUS_TAG
              docker compose pull
              docker compose up -d

              # Health check
              sleep 10
              if curl -f -s http://localhost:8000/docs > /dev/null; then
                echo "‚úÖ Rollback successful - API is responding with previous version"
              else
                echo "‚ùå Rollback health check failed"
                docker compose logs --tail=20
                exit 1
              fi
            else
              echo "‚ùå Cannot rollback - no previous version information found"
              exit 1
            fi

      - name: Notify rollback completed
        run: |
          echo "::warning::Backend was rolled back due to frontend deployment failure"
          echo "Both services remain on their previous versions for consistency"
