name: Claude Code

# Define reusable allowed tools list under a legal node (e.g. env)
env:
  ALLOWED_TOOLS: &allowed-tools |
    # Git operations
    Bash(git add *)
    Bash(git commit -m *)
    Bash(git push)
    Bash(git pull)
    Bash(git status)
    Bash(git diff)
    Bash(git log *)
    Bash(git branch *)
    Bash(git checkout *)

    # GitHub CLI
    Bash(gh pr create *)
    Bash(gh pr review *)
    Bash(gh pr view *)
    Bash(gh api *)

    # Frontend tools (npm/Node.js)
    Bash(npm install)
    Bash(npm run build)
    Bash(npm run dev)
    Bash(npm run test)
    Bash(npm run test:*)
    Bash(npm run lint)
    Bash(npm run lint:fix)
    Bash(npm run format)
    Bash(npm run format:check)
    Bash(npm run type-check)
    Bash(npm run preview)
    Bash(npm run deploy)

    # Backend tools (Python/uv)
    Bash(cd backend && uv run pytest *)
    Bash(cd backend && uv run ruff *)
    Bash(cd backend && uv run mypy *)
    Bash(cd backend && uv run python *)
    Bash(cd backend && uv sync)
    Bash(cd backend && uv pip install *)

    # Nix tools (for development environment)
    Bash(nix develop)
    Bash(nix build)
    Bash(nix flake check)
    Bash(nix flake update)

    # Essential file operations (restricted)
    Bash(ls -la)
    Bash(pwd)
    Bash(cd frontend)
    Bash(cd backend)
    Bash(cd ..)
    Bash(mkdir -p *)
    Bash(rm -f *.tmp)
    Bash(rm -f *.log)
    Bash(rm -rf node_modules)
    Bash(rm -rf dist)
    Bash(rm -rf coverage)

    # Search tools (as per CLAUDE.md)
    Bash(rg *)
    Bash(fd *)
    Bash(jq *)

    # Read-only operations
    Bash(cat *)
    Bash(head -n *)
    Bash(tail -n *)
    Bash(wc -l *)
    Bash(which *)
    Bash(env | grep *)

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]

jobs:
  claude:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
      (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude')))
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      issues: read
      id-token: write
      actions: read # Required for Claude to read CI results on PRs
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Run Claude Code
        id: claude
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

          # This is an optional setting that allows Claude to read CI results on PRs
          additional_permissions: |
            actions: read

          # Optional: Specify model (defaults to Claude Sonnet 4, uncomment for Claude Opus 4)
          # model: "claude-opus-4-20250514"

          # Optional: Customize the trigger phrase (default: @claude)
          # trigger_phrase: "/claude"

          # Optional: Trigger when specific user is assigned to an issue
          # assignee_trigger: "claude-bot"

          # Optional: Allow Claude to run specific commands
          allowed_tools: "*allowed-tools"

          # Optional: Add custom instructions for Claude to customize its behavior for your project
          # custom_instructions: |
          #   Follow our coding standards
          #   Ensure all new code has tests
          #   Use TypeScript for new files

          # Optional: Custom environment variables for Claude
          # claude_env: |
          #   NODE_ENV: test
