name: Claude Code Review

on:
  pull_request:
    types: [opened, synchronize]
    # Optional: Only run on specific file changes
    # paths:
    #   - "src/**/*.ts"
    #   - "src/**/*.tsx"
    #   - "src/**/*.js"
    #   - "src/**/*.jsx"

jobs:
  claude-review:
    # Optional: Filter by PR author
    # if: |
    #   github.event.pull_request.user.login == 'external-contributor' ||
    #   github.event.pull_request.user.login == 'new-developer' ||
    #   github.event.pull_request.author_association == 'FIRST_TIME_CONTRIBUTOR'

    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: read
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Run Claude Code Review
        id: claude-review
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

          # Optional: Specify model (defaults to Claude Sonnet 4, uncomment for Claude Opus 4)
          # model: "claude-opus-4-20250514"

          # Direct prompt for automated review (no @claude mention needed)
          direct_prompt: |
            Please review this pull request and provide feedback on:
            - Code quality and best practices
            - Potential bugs or issues
            - Performance considerations
            - Security concerns
            - Test coverage

            Be constructive and helpful in your feedback.

          # Optional: Use sticky comments to make Claude reuse the same comment on subsequent pushes to the same PR
          # use_sticky_comment: true

          # Optional: Customize review based on file types
          # direct_prompt: |
          #   Review this PR focusing on:
          #   - For TypeScript files: Type safety and proper interface usage
          #   - For API endpoints: Security, input validation, and error handling
          #   - For React components: Performance, accessibility, and best practices
          #   - For tests: Coverage, edge cases, and test quality

          # Optional: Different prompts for different authors
          # direct_prompt: |
          #   ${{ github.event.pull_request.author_association == 'FIRST_TIME_CONTRIBUTOR' &&
          #   'Welcome! Please review this PR from a first-time contributor. Be encouraging and provide detailed explanations for any suggestions.' ||
          #   'Please provide a thorough code review focusing on our coding standards and best practices.' }}

          # Optional: Add specific tools for running tests or linting
          allowed_tools: "Bash(npm run test),Bash(npm run lint),Bash(npm run typecheck),Bash(npm install),Bash(npm run build),Bash(git *),Bash(npm *),Bash(yarn *),Bash(pnpm *),Bash(gh *),Bash(nix *),Bash(nix-shell *),Bash(nix-build *),Bash(nix-env *),Bash(nixos-rebuild *),Bash(rg *),Bash(fd *),Bash(jq *),Bash(docker *),Bash(docker-compose *),Bash(make *),Bash(cmake *),Bash(cargo *),Bash(rustc *),Bash(python *),Bash(pip *),Bash(poetry *),Bash(node *),Bash(npx *),Bash(pnpx *),Bash(curl *),Bash(wget *),Bash(cat *),Bash(ls *),Bash(grep *),Bash(sed *),Bash(awk *),Bash(find *),Bash(which *),Bash(pwd),Bash(cd *),Bash(mkdir *),Bash(rm *),Bash(cp *),Bash(mv *),Bash(touch *),Bash(echo *),Bash(head *),Bash(tail *),Bash(less *),Bash(more *),Bash(wc *),Bash(sort *),Bash(uniq *),Bash(diff *),Bash(patch *),Bash(tar *),Bash(gzip *),Bash(gunzip *),Bash(zip *),Bash(unzip *),Bash(chmod *),Bash(chown *),Bash(ps *),Bash(top),Bash(htop),Bash(kill *),Bash(pkill *),Bash(env),Bash(export *),Bash(source *),Bash(bash *),Bash(sh *),Bash(zsh *),Bash(fish *)"

          # Optional: Skip review for certain conditions
          # if: |
          #   !contains(github.event.pull_request.title, '[skip-review]') &&
          #   !contains(github.event.pull_request.title, '[WIP]')
