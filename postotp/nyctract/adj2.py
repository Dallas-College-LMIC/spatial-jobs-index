#! /usr/bin/python3
# Travelshed Mapping
# OpenTripPlanner Guide: http://docs.opentripplanner.org/en/latest/
# OpenTripPlanner API Doc: http://dev.opentripplanner.org/apidoc/1.0.0/index.html

import matplotlib
matplotlib.use('Agg')

import datetime
import time
import geopandas as gpd
import pandas as pd
import numpy as np
import shapely
import requests
import multiprocessing as mp
import matplotlib.pyplot as plt
import contextily as ctx
import mpl_toolkits.axes_grid1

start=datetime.datetime.now()

pd.set_option('display.max_columns', None)
path='/home/mayijun/TRAVELSHED/'
#path='C:/Users/Yijun Ma/Desktop/D/DOCUMENT/DCP2018/TRAVELSHEDREVAMP/'
#path='C:/Users/Y_Ma2/Desktop/amazon/'
#path='C:/Users/Y_Ma2/Desktop/TEST/'
#path='E:/TRAVELSHEDREVAMP/'
#doserver='http://142.93.21.138:8801/'
#doserver='http://159.65.64.166:8801/'
doserver='http://localhost:8801/'




## Map checks
#
# Define add basemap
def add_basemap(ax, zoom, url='http://tile.stamen.com/terrain/tileZ/tileX/tileY.png'):
    xmin, xmax, ymin, ymax = ax.axis()
    basemap, extent = ctx.bounds2img(xmin, ymin, xmax, ymax, zoom=zoom, url=url)
    ax.imshow(basemap, extent=extent, interpolation='bilinear')
    ax.axis((xmin, xmax, ymin, ymax))

## Map tract level
#ct=gpd.read_file(path+'shp/quadstatectclipped.shp')
#ct.crs={'init': 'epsg:4326'}
#ct=ct[['tractid','geometry']]

## Res
#resct=pd.read_csv(path+'nyctract/resct2.csv',dtype=float,converters={'tractid':str})
#resloclist=resct.columns[1:]
#resct=ct.merge(resct,on='tractid')
#for i in resloclist:
#    resctmap=resct.loc[resct[i]<=120,[i,'geometry']]
#    resctmap=resctmap.to_crs(epsg=3857)
#    fig,ax=plt.subplots(1,figsize=(11,8.5))
#    plt.subplots_adjust(left=0.05,right=0.95,top=0.95,bottom=0.05)
#    ax=resctmap.plot(figsize=(11,8.5),edgecolor=None,column=i,cmap='Spectral',linewidth=0.2,ax=ax,alpha=0.7)
#    add_basemap(ax,zoom=11,url=ctx.sources.ST_TONER_LITE)
#    ax.set_axis_off()
#    ax.set_title('AM Peak Transit Travel Time (Minutes) from '+i,fontdict={'fontsize':'16','fontweight':'10'})
#    sm=plt.cm.ScalarMappable(cmap='Spectral',norm=plt.Normalize(vmin=1,vmax=120))
#    sm._A=[]
#    divider=mpl_toolkits.axes_grid1.make_axes_locatable(ax)
#    cax=divider.append_axes("right",size="3%",pad=0.2,aspect=25)
#    cbar=fig.colorbar(sm,cax=cax)
#    fig.tight_layout()
#    fig.savefig(path+'nyctract/res3/'+i+'ct.jpg', dpi=300)

## Work
#workct=pd.read_csv(path+'nyctract/workct2.csv',dtype=float,converters={'tractid':str})
#workloclist=workct.columns[1:]
#workct=ct.merge(workct,on='tractid')
#for i in workloclist:
#    workctmap=workct.loc[workct[i]<=120,[i,'geometry']]
#    workctmap=workctmap.to_crs(epsg=3857)
#    fig,ax=plt.subplots(1,figsize=(11,8.5))
#    plt.subplots_adjust(left=0.05,right=0.95,top=0.95,bottom=0.05)
#    ax=workctmap.plot(figsize=(11,8.5),edgecolor=None,column=i,cmap='Spectral',linewidth=0.2,ax=ax,alpha=0.7)
#    add_basemap(ax,zoom=11,url=ctx.sources.ST_TONER_LITE)
#    ax.set_axis_off()
#    ax.set_title('AM Peak Transit Travel Time (Minutes) to '+i,fontdict={'fontsize':'16','fontweight':'10'})
#    sm=plt.cm.ScalarMappable(cmap='Spectral',norm=plt.Normalize(vmin=1,vmax=120))
#    sm._A=[]
#    divider=mpl_toolkits.axes_grid1.make_axes_locatable(ax)
#    cax=divider.append_axes("right",size="3%",pad=0.2,aspect=25)
#    cbar=fig.colorbar(sm,cax=cax)
#    fig.tight_layout()
#    fig.savefig(path+'nyctract/work3/'+i+'ct.jpg', dpi=300)




















# Adjustment
# Res Adj
#adjlist=['36005000200','36005000400','36005002400','36005003300','36005003500','36005003700','36005003800','36005003900',
#         '36005004001','36005004100','36005004300','36005004400','36005005100','36005005300','36005006500','36005006700',
#         '36005007400','36005007500','36005007800','36005007900','36005008500','36005009000','36005013100','36005013300',
#         '36005015300','36005016500','36005018302','36005020400','36005021002','36005021602','36005022403','36005022404',
#         '36005022702','36005022800','36005022902','36005023200','36005024600','36005024700','36005025600','36005026400',
#         '36005027402','36005027700','36005028100','36005028800','36005030900','36005031400','36005031600','36005031800',
#         '36005032400','36005032600','36005032800','36005033000','36005033202','36005034000','36005034200','36005034400',
#         '36005034500','36005034800','36005035100','36005035600','36005035800','36005035900','36005036000','36005036400',
#         '36005036700','36005037200','36005037600','36005038000','36005038302','36005038500','36005038700','36005038800',
#         '36005039000','36005039100','36005039300','36005039400','36005039600','36005039800','36005040400','36005040600',
#         '36005040800','36005041800','36005042000','36005042200','36005042400','36005042800','36005043000','36005043100',
#         '36005043500','36005044200','36005045600','36005046202','36005048400','36005050400']

#adjlist=['36005002400','36005005100','36005024600','36005025600','36005031600','36005034800','36005035800','36005038500',
#         '36005038700']

#adjlist=['36047000301','36047000700','36047001500','36047001800','36047002200','36047003100','36047003900','36047004600',
#         '36047004900','36047005900','36047006300','36047006700','36047007100','36047008200','36047009400','36047009600',
#         '36047009800','36047010000','36047010200','36047012200','36047012700','36047013000','36047013100','36047013400',
#         '36047013600','36047014200','36047014500','36047014700','36047015900','36047016300','36047016500','36047016600',
#         '36047017500','36047017700','36047018000','36047018400','36047019400','36047019700','36047020500','36047020700',
#         '36047021000','36047021300','36047021500','36047021900','36047022100','36047023100','36047023200','36047024900',
#         '36047025500','36047025700','36047025902','36047026600','36047026700','36047026900','36047027500','36047029100',
#         '36047029500','36047030300','36047030500','36047030700','36047030900','36047031100','36047031300','36047031500',
#         '36047031701','36047032300','36047032500','36047033100','36047033300','36047034300','36047034500','36047034700',
#         '36047034900','36047035500','36047035700','36047036100','36047036501','36047036600','36047037700','36047038100',
#         '36047040600','36047041300','36047041500','36047041800','36047042000','36047042100','36047042300','36047042500',
#         '36047043100','36047043500','36047044200','36047044800','36047044900','36047046800','36047047000','36047048400',
#         '36047048800','36047049000','36047050500','36047051500','36047052300','36047052600','36047054200','36047054400',
#         '36047054500','36047054700','36047054900','36047055600','36047060000','36047062800','36047064600','36047064800',
#         '36047065800','36047067400','36047069602','36047070600','36047076800','36047077600','36047078200','36047078800',
#         '36047079200','36047079400','36047079601','36047079602','36047079802','36047080000','36047080200','36047080600',
#         '36047081000','36047081400','36047081600','36047081800','36047082200','36047083600','36047084800','36047085000',
#         '36047085200','36047085400','36047085600','36047085800','36047086000','36047086600','36047087401','36047087600',
#         '36047088200','36047088400','36047089000','36047089600','36047090200','36047091000','36047091600','36047091800',
#         '36047092000','36047092400','36047092800','36047093200','36047094401','36047095800','36047096000','36047097000',
#         '36047098400','36047098600','36047102600','36047105804','36047110400','36047111600','36047112200','36047114201',
#         '36047116000','36047116200','36047116400','36047116800','36047117201','36047117601','36047117800','36047118202',
#         '36047118600','36047119000','36047119200','36047119800','36047120800','36047121000','36047121400','36047150200']

#adjlist=['36047000700','36047001800','36047009400','36047010000','36047013100','36047014700','36047016500','36047017500',
#         '36047017700','36047020500','36047030700','36047031100','36047032300','36047032500','36047034300','36047034500',
#         '36047034700','36047035700','36047036600','36047040600','36047044900','36047047000','36047048800','36047052300',
#         '36047054500','36047055600','36047060000','36047062800','36047078200','36047078800','36047079400','36047079601',
#         '36047079602','36047080600','36047081000','36047085400','36047085600','36047088200','36047089600','36047092800',
#         '36047118202']

#adjlist=['36061001200','36061001501','36061001502','36061002500','36061002700','36061002900','36061003300','36061003601',
#         '36061003900','36061004500','36061004700','36061004900','36061005200','36061005900','36061006000','36061006100',
#         '36061006800','36061006900','36061007500','36061007900','36061008200','36061008400','36061008602','36061008603',
#         '36061009000','36061009200','36061009600','36061009700','36061009900','36061010200','36061010601','36061010602',
#         '36061011100','36061011800','36061012000','36061012400','36061012500','36061012800','36061012900','36061013200',
#         '36061013400','36061013600','36061013800','36061013900','36061014300','36061014401','36061014402','36061014700',
#         '36061014802','36061015001','36061015002','36061015500','36061015801','36061016100','36061016200','36061017100',
#         '36061017402','36061017700','36061017900','36061018400','36061018700','36061019000','36061019400','36061019701',
#         '36061019800','36061020000','36061020101','36061020600','36061020800','36061021000','36061021303','36061021400',
#         '36061021500','36061021600','36061022000','36061022302','36061022400','36061022600','36061023000','36061023100',
#         '36061023200','36061023502','36061023802','36061024000','36061024200','36061024700','36061024900','36061025500',
#         '36061026100','36061026700','36061026900','36061027500','36061028100','36061028300','36061029100','36061029500',
#         '36061029700','36061030700','36061031100','36061031703','36061031704']

#adjlist=['36061001200','36061003601','36061006100','36061006800','36061007500','36061008602','36061009700','36061010601',
#         '36061010602','36061012400','36061012900','36061013200','36061013400','36061013600','36061013800','36061014401',
#         '36061014402','36061014700','36061016100','36061018700','36061023502','36061023802','36061024000','36061025500',
#         '36061026900','36061031704']

#adjlist=['36081000100','36081000200','36081000400','36081000600','36081000700','36081000800','36081001600','36081002600',
#         '36081003000','36081003300','36081003400','36081003600','36081004401','36081005100','36081005300','36081006100',
#         '36081006202','36081006300','36081006501','36081006502','36081006900','36081007100','36081007300','36081007500',
#         '36081008300','36081009100','36081009500','36081009700','36081010100','36081010500','36081010701','36081010800',
#         '36081011100','36081011300','36081011400','36081011500','36081011700','36081012000','36081012200','36081012500',
#         '36081013600','36081013800','36081014202','36081014500','36081015100','36081015801','36081016800','36081016900',
#         '36081017000','36081017200','36081017400','36081017800','36081018102','36081018300','36081018501','36081018502',
#         '36081018700','36081018900','36081020200','36081020800','36081021400','36081021600','36081022002','36081022900',
#         '36081023200','36081023500','36081024500','36081024700','36081024900','36081025301','36081025500','36081025700',
#         '36081025900','36081026100','36081026300','36081026400','36081027300','36081028800','36081029100','36081029700',
#         '36081029900','36081030600','36081032800','36081033000','36081033100','36081033401','36081033402','36081035700',
#         '36081035800','36081036300','36081037500','36081037700','36081037900','36081038100','36081038301','36081038400',
#         '36081039400','36081039800','36081040000','36081040700','36081041300','36081042400','36081042600','36081044301',
#         '36081045900','36081046100','36081046300','36081046400','36081047200','36081047600','36081048200','36081048300',
#         '36081049500','36081050202','36081050800','36081051000','36081051300','36081052800','36081053000','36081053100',
#         '36081053500','36081053800','36081053900','36081054500','36081054700','36081054900','36081055100','36081055700',
#         '36081056400','36081056500','36081056800','36081057900','36081058000','36081059400','36081059600','36081061200',
#         '36081061601','36081061602','36081061900','36081062000','36081062400','36081062500','36081063000','36081063700',
#         '36081063800','36081064600','36081065000','36081065400','36081065600','36081066000','36081066100','36081066400',
#         '36081066701','36081066900','36081067900','36081068000','36081068700','36081069000','36081069400','36081069500',
#         '36081071303','36081071305','36081071600','36081071702','36081072300','36081073700','36081074700','36081074900',
#         '36081075702','36081077300','36081077500','36081077902','36081077903','36081077904','36081078800','36081079300',
#         '36081079702','36081079900','36081080301','36081080302','36081081400','36081081800','36081084900','36081085500',
#         '36081085700','36081086300','36081086400','36081086500','36081088400','36081090700','36081091601','36081091602',
#         '36081094203','36081094500','36081094700','36081096400','36081097202','36081097203','36081097204','36081097300',
#         '36081098700','36081099100','36081099701','36081099705','36081099801','36081099802','36081099900','36081100801',
#         '36081100802','36081101001','36081101002','36081101700','36081102900','36081103201','36081103202','36081103300',
#         '36081103900','36081105900','36081107201','36081108500','36081109300','36081109700','36081109900','36081111300',
#         '36081112300','36081112900','36081113300','36081113900','36081114100','36081114700','36081115100','36081115500',
#         '36081115900','36081116300','36081117100','36081117500','36081118100','36081118500','36081118700','36081119300',
#         '36081120300','36081121500','36081122300','36081124100','36081124700','36081125700','36081126700','36081127700',
#         '36081128300','36081129102','36081129103','36081129104','36081133300','36081133900','36081134700','36081137700',
#         '36081138501','36081138502','36081139900','36081140300','36081140902','36081142900','36081143500','36081144700',
#         '36081145101','36081145900','36081146300','36081146700','36081147100','36081147900','36081148300','36081150701',
#         '36081150702','36081152901','36081152902','36081155101','36081155102','36081157101','36081157901','36081157902',
#         '36081157903','36081162100']

#adjlist=['36081006501','36081009500','36081009700','36081010100','36081011300','36081011700','36081013800','36081021600',
#         '36081022002','36081022900','36081023500','36081024500','36081024700','36081025500','36081025700','36081025900',
#         '36081029700','36081029900','36081033000','36081033402','36081035800','36081037700','36081038301','36081046300',
#         '36081050202','36081053900','36081055100','36081056500','36081058000','36081059400','36081061200','36081061601',
#         '36081062000','36081062400','36081063800','36081064600','36081065000','36081065600','36081066000','36081066400',
#         '36081068000','36081069000','36081069400','36081071600','36081074900','36081077902','36081079300','36081079702',
#         '36081080301','36081091601','36081091602','36081094203','36081096400','36081097300','36081099705','36081099802',
#         '36081099900','36081101001','36081101002','36081101700','36081102900','36081103202','36081105900','36081108500',
#         '36081109900','36081111300','36081112300','36081112900','36081113300','36081114700','36081115100','36081115500',
#         '36081115900','36081117500','36081118100','36081124100','36081126700','36081127700','36081129103','36081137700',
#         '36081144700','36081146300','36081146700','36081147900','36081148300','36081150701','36081150702','36081155101',
#         '36081157901','36081162100']

#adjlist=['36085001800','36085002001','36085003900','36085004000','36085005900','36085007700','36085009602','36085011201',
#         '36085011401','36085011402','36085012805','36085013800','36085014604','36085014606','36085014607','36085014700',
#         '36085015100','36085015601','36085017007','36085017009','36085017010','36085017700','36085018100','36085018702',
#         '36085020803','36085022600','36085032300']

#adjlist=['36085004000','36085005900','36085011201','36085011401','36085018100']

#adjlist=['36005000200','36005000400','36005002400','36005003300','36005003500','36005003700','36005003800','36005003900',
#         '36005004001','36005004100','36005004300','36005004400','36005005100','36005005300','36005006500','36005006700',
#         '36005007400','36005007500','36005007800','36005007900','36005008500','36005009000','36005013100','36005013300',
#         '36005015300','36005016500','36005018302','36005020400','36005021002','36005021602','36005022403','36005022404',
#         '36005022702','36005022800','36005022902','36005023200','36005024600','36005024700','36005025600','36005026400',
#         '36005027402','36005027700','36005028100','36005028800','36005030900','36005031400','36005031600','36005031800',
#         '36005032400','36005032600','36005032800','36005033000','36005033202','36005034000','36005034200','36005034400',
#         '36005034500','36005034800','36005035100','36005035600','36005035800','36005035900','36005036000','36005036400',
#         '36005036700','36005037200','36005037600','36005038000','36005038302','36005038500','36005038700','36005038800',
#         '36005039000','36005039100','36005039300','36005039400','36005039600','36005039800','36005040400','36005040600',
#         '36005040800','36005041800','36005042000','36005042200','36005042400','36005042800','36005043000','36005043100',
#         '36005043500','36005044200','36005045600','36005046202','36005048400','36005050400',
#         '36047000301','36047000700','36047001500','36047001800','36047002200','36047003100','36047003900','36047004600',
#         '36047004900','36047005900','36047006300','36047006700','36047007100','36047008200','36047009400','36047009600',
#         '36047009800','36047010000','36047010200','36047012200','36047012700','36047013000','36047013100','36047013400',
#         '36047013600','36047014200','36047014500','36047014700','36047015900','36047016300','36047016500','36047016600',
#         '36047017500','36047017700','36047018000','36047018400','36047019400','36047019700','36047020500','36047020700',
#         '36047021000','36047021300','36047021500','36047021900','36047022100','36047023100','36047023200','36047024900',
#         '36047025500','36047025700','36047025902','36047026600','36047026700','36047026900','36047027500','36047029100',
#         '36047029500','36047030300','36047030500','36047030700','36047030900','36047031100','36047031300','36047031500',
#         '36047031701','36047032300','36047032500','36047033100','36047033300','36047034300','36047034500','36047034700',
#         '36047034900','36047035500','36047035700','36047036100','36047036501','36047036600','36047037700','36047038100',
#         '36047040600','36047041300','36047041500','36047041800','36047042000','36047042100','36047042300','36047042500',
#         '36047043100','36047043500','36047044200','36047044800','36047044900','36047046800','36047047000','36047048400',
#         '36047048800','36047049000','36047050500','36047051500','36047052300','36047052600','36047054200','36047054400',
#         '36047054500','36047054700','36047054900','36047055600','36047060000','36047062800','36047064600','36047064800',
#         '36047065800','36047067400','36047069602','36047070600','36047076800','36047077600','36047078200','36047078800',
#         '36047079200','36047079400','36047079601','36047079602','36047079802','36047080000','36047080200','36047080600',
#         '36047081000','36047081400','36047081600','36047081800','36047082200','36047083600','36047084800','36047085000',
#         '36047085200','36047085400','36047085600','36047085800','36047086000','36047086600','36047087401','36047087600',
#         '36047088200','36047088400','36047089000','36047089600','36047090200','36047091000','36047091600','36047091800',
#         '36047092000','36047092400','36047092800','36047093200','36047094401','36047095800','36047096000','36047097000',
#         '36047098400','36047098600','36047102600','36047105804','36047110400','36047111600','36047112200','36047114201',
#         '36047116000','36047116200','36047116400','36047116800','36047117201','36047117601','36047117800','36047118202',
#         '36047118600','36047119000','36047119200','36047119800','36047120800','36047121000','36047121400','36047150200',
#         '36061001200','36061001501','36061001502','36061002500','36061002700','36061002900','36061003300','36061003601',
#         '36061003900','36061004500','36061004700','36061004900','36061005200','36061005900','36061006000','36061006100',
#         '36061006800','36061006900','36061007500','36061007900','36061008200','36061008400','36061008602','36061008603',
#         '36061009000','36061009200','36061009600','36061009700','36061009900','36061010200','36061010601','36061010602',
#         '36061011100','36061011800','36061012000','36061012400','36061012500','36061012800','36061012900','36061013200',
#         '36061013400','36061013600','36061013800','36061013900','36061014300','36061014401','36061014402','36061014700',
#         '36061014802','36061015001','36061015002','36061015500','36061015801','36061016100','36061016200','36061017100',
#         '36061017402','36061017700','36061017900','36061018400','36061018700','36061019000','36061019400','36061019701',
#         '36061019800','36061020000','36061020101','36061020600','36061020800','36061021000','36061021303','36061021400',
#         '36061021500','36061021600','36061022000','36061022302','36061022400','36061022600','36061023000','36061023100',
#         '36061023200','36061023502','36061023802','36061024000','36061024200','36061024700','36061024900','36061025500',
#         '36061026100','36061026700','36061026900','36061027500','36061028100','36061028300','36061029100','36061029500',
#         '36061029700','36061030700','36061031100','36061031703','36061031704',
#         '36081000100','36081000200','36081000400','36081000600','36081000700','36081000800','36081001600','36081002600',
#         '36081003000','36081003300','36081003400','36081003600','36081004401','36081005100','36081005300','36081006100',
#         '36081006202','36081006300','36081006501','36081006502','36081006900','36081007100','36081007300','36081007500',
#         '36081008300','36081009100','36081009500','36081009700','36081010100','36081010500','36081010701','36081010800',
#         '36081011100','36081011300','36081011400','36081011500','36081011700','36081012000','36081012200','36081012500',
#         '36081013600','36081013800','36081014202','36081014500','36081015100','36081015801','36081016800','36081016900',
#         '36081017000','36081017200','36081017400','36081017800','36081018102','36081018300','36081018501','36081018502',
#         '36081018700','36081018900','36081020200','36081020800','36081021400','36081021600','36081022002','36081022900',
#         '36081023200','36081023500','36081024500','36081024700','36081024900','36081025301','36081025500','36081025700',
#         '36081025900','36081026100','36081026300','36081026400','36081027300','36081028800','36081029100','36081029700',
#         '36081029900','36081030600','36081032800','36081033000','36081033100','36081033401','36081033402','36081035700',
#         '36081035800','36081036300','36081037500','36081037700','36081037900','36081038100','36081038301','36081038400',
#         '36081039400','36081039800','36081040000','36081040700','36081041300','36081042400','36081042600','36081044301',
#         '36081045900','36081046100','36081046300','36081046400','36081047200','36081047600','36081048200','36081048300',
#         '36081049500','36081050202','36081050800','36081051000','36081051300','36081052800','36081053000','36081053100',
#         '36081053500','36081053800','36081053900','36081054500','36081054700','36081054900','36081055100','36081055700',
#         '36081056400','36081056500','36081056800','36081057900','36081058000','36081059400','36081059600','36081061200',
#         '36081061601','36081061602','36081061900','36081062000','36081062400','36081062500','36081063000','36081063700',
#         '36081063800','36081064600','36081065000','36081065400','36081065600','36081066000','36081066100','36081066400',
#         '36081066701','36081066900','36081067900','36081068000','36081068700','36081069000','36081069400','36081069500',
#         '36081071303','36081071305','36081071600','36081071702','36081072300','36081073700','36081074700','36081074900',
#         '36081075702','36081077300','36081077500','36081077902','36081077903','36081077904','36081078800','36081079300',
#         '36081079702','36081079900','36081080301','36081080302','36081081400','36081081800','36081084900','36081085500',
#         '36081085700','36081086300','36081086400','36081086500','36081088400','36081090700','36081091601','36081091602',
#         '36081094203','36081094500','36081094700','36081096400','36081097202','36081097203','36081097204','36081097300',
#         '36081098700','36081099100','36081099701','36081099705','36081099801','36081099802','36081099900','36081100801',
#         '36081100802','36081101001','36081101002','36081101700','36081102900','36081103201','36081103202','36081103300',
#         '36081103900','36081105900','36081107201','36081108500','36081109300','36081109700','36081109900','36081111300',
#         '36081112300','36081112900','36081113300','36081113900','36081114100','36081114700','36081115100','36081115500',
#         '36081115900','36081116300','36081117100','36081117500','36081118100','36081118500','36081118700','36081119300',
#         '36081120300','36081121500','36081122300','36081124100','36081124700','36081125700','36081126700','36081127700',
#         '36081128300','36081129102','36081129103','36081129104','36081133300','36081133900','36081134700','36081137700',
#         '36081138501','36081138502','36081139900','36081140300','36081140902','36081142900','36081143500','36081144700',
#         '36081145101','36081145900','36081146300','36081146700','36081147100','36081147900','36081148300','36081150701',
#         '36081150702','36081152901','36081152902','36081155101','36081155102','36081157101','36081157901','36081157902',
#         '36081157903','36081162100',
#         '36085001800','36085002001','36085003900','36085004000','36085005900','36085007700','36085009602','36085011201',
#         '36085011401','36085011402','36085012805','36085013800','36085014604','36085014606','36085014607','36085014700',
#         '36085015100','36085015601','36085017007','36085017009','36085017010','36085017700','36085018100','36085018702',
#         '36085020803','36085022600','36085032300']



# Work Adj
#adjlist=['36005000100','36005000400','36005001900','36005002400','36005003700','36005005001','36005005200','36005005300',
#         '36005006300','36005007500','36005007900','36005008500','36005009000','36005009800','36005011000','36005011502',
#         '36005011700','36005013300','36005015300','36005015700','36005016300','36005016500','36005020400','36005022902',
#         '36005023100','36005023200','36005024600','36005026400','36005027401','36005027402','36005028800','36005030900',
#         '36005031000','36005031600','36005032300','36005032400','36005035000','36005035100','36005036300','36005036700',
#         '36005037200','36005038500','36005039000','36005039100','36005039400','36005040400','36005040502','36005041500',
#         '36005043000','36005045600','36005046202']

#adjlist=['36005000400','36005009000','36005024600','36005030900','36005031000','36005038500','36005040400']

#adjlist=['36047000200','36047000301','36047000700','36047001800','36047002000','36047002200','36047002901','36047003100',
#         '36047003600','36047003700','36047005202','36047005400','36047005601','36047006300','36047006600','36047007000',
#         '36047007200','36047007700','36047008600','36047009200','36047009600','36047010000','36047010200','36047010400',
#         '36047010600','36047011000','36047011400','36047012200','36047012600','36047012801','36047013400','36047014700',
#         '36047016500','36047016600','36047016800','36047017100','36047017200','36047018000','36047018300','36047018400',
#         '36047018600','36047019300','36047020500','36047020700','36047021200','36047021300','36047022100','36047022400',
#         '36047023100','36047023200','36047023400','36047023500','36047023600','36047023800','36047024100','36047024200',
#         '36047024300','36047024800','36047025700','36047025902','36047026000','36047026600','36047026700','36047026900',
#         '36047027200','36047027400','36047027500','36047028200','36047028300','36047028502','36047028600','36047029500',
#         '36047030200','36047030300','36047030500','36047030700','36047031701','36047032300','36047032500','36047032700',
#         '36047032900','36047033300','36047034100','36047034300','36047034500','36047034900','36047035500','36047035700',
#         '36047036300','36047036501','36047036502','36047036900','36047037100','36047037401','36047038100','36047038800',
#         '36047039000','36047039100','36047039500','36047039900','36047040600','36047040800','36047041600','36047041900',
#         '36047042000','36047042500','36047043100','36047043500','36047043700','36047044900','36047045200','36047045400',
#         '36047046000','36047046800','36047047600','36047047800','36047048200','36047048800','36047049000','36047049200',
#         '36047049400','36047050600','36047050700','36047050801','36047051500','36047051601','36047051602','36047052000',
#         '36047052300','36047052600','36047053000','36047053100','36047053300','36047053400','36047054200','36047054400',
#         '36047054500','36047054600','36047055600','36047055800','36047056000','36047056200','36047057300','36047057800',
#         '36047057900','36047058400','36047058800','36047058900','36047059200','36047059401','36047060000','36047060800',
#         '36047061002','36047061004','36047062600','36047064000','36047064600','36047065600','36047065800','36047066000',
#         '36047067800','36047068000','36047068200','36047069601','36047069800','36047070202','36047070600','36047073400',
#         '36047075800','36047076400','36047076600','36047077200','36047077600','36047078000','36047078200','36047078400',
#         '36047079200','36047079400','36047079801','36047079802','36047080000','36047080400','36047080600','36047080800',
#         '36047081000','36047081600','36047081800','36047082000','36047082200','36047083600','36047085200','36047085400',
#         '36047085600','36047086600','36047087401','36047087600','36047088000','36047088200','36047088600','36047089600',
#         '36047089800','36047090000','36047091200','36047092800','36047094401','36047095800','36047096000','36047098200',
#         '36047098400','36047098600','36047099400','36047101600','36047101800','36047102600','36047103400','36047107800',
#         '36047109800','36047114201','36047114400','36047115000','36047116600','36047117800','36047118600','36047119000',
#         '36047119200','36047119400','36047120800','36047990100']

#adjlist=['36047000700','36047002200','36047002901','36047006300','36047010000','36047010200','36047016500','36047017100',
#         '36047018000','36047018300','36047021200','36047023200','36047024300','36047026700','36047034100','36047034300',
#         '36047034500','36047035500','36047036300','36047039000','36047039100','36047040600','36047044900','36047049200',
#         '36047051601','36047051602','36047052600','36047054200','36047054400','36047055600','36047057300','36047058800',
#         '36047069800','36047070600','36047073400','36047075800','36047076400','36047076600','36047077200','36047078200',
#         '36047080600','36047080800','36047081000','36047081600','36047085200','36047087401','36047088600','36047089600',
#         '36047098400','36047098600','36047115000','36047118600','36047120800']

#adjlist=['36061000201','36061001402','36061001502','36061001600','36061001800','36061002201','36061002500','36061002900',
#         '36061003900','36061004100','36061005400','36061006100','36061008603','36061009000','36061009900','36061010300',
#         '36061010601','36061011100','36061012400','36061012700','36061013200','36061013400','36061013800','36061014300',
#         '36061014700','36061015400','36061016100','36061016400','36061017000','36061017401','36061017402','36061017700',
#         '36061018400','36061018900','36061019300','36061020600','36061020800','36061021000','36061021303','36061021500',
#         '36061021703','36061022302','36061022400','36061022600','36061022700','36061022800','36061023000','36061023501',
#         '36061023502','36061023801','36061023900','36061024200','36061024302','36061024500','36061024900','36061025500',
#         '36061026900','36061027500','36061028300','36061029100','36061029500','36061029700','36061031100','36061031703',
#         '36061031704']

#adjlist=['36061010601','36061025500']

#adjlist=['36081000600','36081001600','36081003400','36081003600','36081004200','36081005800','36081006100','36081006501',
#         '36081009100','36081010100','36081011300','36081012500','36081014100','36081014201','36081014202','36081014500',
#         '36081015100','36081016900','36081018502','36081018700','36081021400','36081021900','36081022001','36081023200',
#         '36081024000','36081029700','36081038100','36081038301','36081041300','36081041400','36081042400','36081042600',
#         '36081043702','36081044301','36081046300','36081046400','36081047600','36081050202','36081053500','36081053900',
#         '36081054500','36081055800','36081056500','36081058000','36081059100','36081060701','36081061200','36081061301',
#         '36081061601','36081061900','36081062000','36081062300','36081062500','36081062700','36081063301','36081063700',
#         '36081063800','36081064101','36081065000','36081065600','36081066100','36081068700','36081069702','36081071600',
#         '36081072300','36081074700','36081074900','36081075702','36081077903','36081079300','36081083700','36081086500',
#         '36081088400','36081091601','36081091602','36081096400','36081097202','36081097300','36081098700','36081099100',
#         '36081099705','36081099900','36081100801','36081101002','36081101700','36081109300','36081111300','36081112900',
#         '36081113300','36081114700','36081115100','36081115500','36081115900','36081117500','36081118100','36081118500',
#         '36081121500','36081126700','36081129102','36081129103','36081138502','36081147100','36081147900','36081148300',
#         '36081155101','36081155102','36081157101','36081157901','36081157902','36081990100']

#adjlist=['36081000600','36081003400','36081014500','36081018700','36081021900','36081038301','36081056500','36081058000',
#         '36081060701','36081061301','36081061601','36081062000','36081063700','36081065600','36081074900','36081079300',
#         '36081091601','36081091602','36081099900','36081109300','36081111300','36081114700','36081115100','36081129103',
#         '36081147900','36081148300','36081155101','36081157901','36081990100']

#adjlist=['36085000300','36085000600','36085001100','36085001700','36085002001','36085002002','36085003300','36085003600',
#         '36085003900','36085004000','36085004700','36085005000','36085005900','36085007400','36085009602','36085009700',
#         '36085011201','36085011202','36085011401','36085011402','36085012100','36085012200','36085012804','36085012805',
#         '36085013201','36085013203','36085013204','36085013400','36085013800','36085014604','36085014606','36085014700',
#         '36085015100','36085015601','36085015603','36085016901','36085017007','36085017008','36085017009','36085017012',
#         '36085017300','36085017700','36085018100','36085018702','36085018902','36085020804','36085022300','36085022600',
#         '36085023100','36085023900','36085027301','36085027702','36085027704','36085029102','36085029103','36085031902',
#         '36085032300']

#adjlist=['36085000600','36085002002','36085003300','36085003600','36085003900','36085004000','36085004700','36085005900',
#         '36085009602','36085011201','36085011202','36085011402','36085012200','36085012804','36085012805','36085013203',
#         '36085013800','36085014606','36085017007','36085017300','36085017700','36085018100','36085018702','36085020804',
#         '36085022300','36085027704','36085029102','36085032300']

adjlist=['36005000100','36005000400','36005001900','36005002400','36005003700','36005005001','36005005200','36005005300',
         '36005006300','36005007500','36005007900','36005008500','36005009000','36005009800','36005011000','36005011502',
         '36005011700','36005013300','36005015300','36005015700','36005016300','36005016500','36005020400','36005022902',
         '36005023100','36005023200','36005024600','36005026400','36005027401','36005027402','36005028800','36005030900',
         '36005031000','36005031600','36005032300','36005032400','36005035000','36005035100','36005036300','36005036700',
         '36005037200','36005038500','36005039000','36005039100','36005039400','36005040400','36005040502','36005041500',
         '36005043000','36005045600','36005046202',
         '36047000200','36047000301','36047000700','36047001800','36047002000','36047002200','36047002901','36047003100',
         '36047003600','36047003700','36047005202','36047005400','36047005601','36047006300','36047006600','36047007000',
         '36047007200','36047007700','36047008600','36047009200','36047009600','36047010000','36047010200','36047010400',
         '36047010600','36047011000','36047011400','36047012200','36047012600','36047012801','36047013400','36047014700',
         '36047016500','36047016600','36047016800','36047017100','36047017200','36047018000','36047018300','36047018400',
         '36047018600','36047019300','36047020500','36047020700','36047021200','36047021300','36047022100','36047022400',
         '36047023100','36047023200','36047023400','36047023500','36047023600','36047023800','36047024100','36047024200',
         '36047024300','36047024800','36047025700','36047025902','36047026000','36047026600','36047026700','36047026900',
         '36047027200','36047027400','36047027500','36047028200','36047028300','36047028502','36047028600','36047029500',
         '36047030200','36047030300','36047030500','36047030700','36047031701','36047032300','36047032500','36047032700',
         '36047032900','36047033300','36047034100','36047034300','36047034500','36047034900','36047035500','36047035700',
         '36047036300','36047036501','36047036502','36047036900','36047037100','36047037401','36047038100','36047038800',
         '36047039000','36047039100','36047039500','36047039900','36047040600','36047040800','36047041600','36047041900',
         '36047042000','36047042500','36047043100','36047043500','36047043700','36047044900','36047045200','36047045400',
         '36047046000','36047046800','36047047600','36047047800','36047048200','36047048800','36047049000','36047049200',
         '36047049400','36047050600','36047050700','36047050801','36047051500','36047051601','36047051602','36047052000',
         '36047052300','36047052600','36047053000','36047053100','36047053300','36047053400','36047054200','36047054400',
         '36047054500','36047054600','36047055600','36047055800','36047056000','36047056200','36047057300','36047057800',
         '36047057900','36047058400','36047058800','36047058900','36047059200','36047059401','36047060000','36047060800',
         '36047061002','36047061004','36047062600','36047064000','36047064600','36047065600','36047065800','36047066000',
         '36047067800','36047068000','36047068200','36047069601','36047069800','36047070202','36047070600','36047073400',
         '36047075800','36047076400','36047076600','36047077200','36047077600','36047078000','36047078200','36047078400',
         '36047079200','36047079400','36047079801','36047079802','36047080000','36047080400','36047080600','36047080800',
         '36047081000','36047081600','36047081800','36047082000','36047082200','36047083600','36047085200','36047085400',
         '36047085600','36047086600','36047087401','36047087600','36047088000','36047088200','36047088600','36047089600',
         '36047089800','36047090000','36047091200','36047092800','36047094401','36047095800','36047096000','36047098200',
         '36047098400','36047098600','36047099400','36047101600','36047101800','36047102600','36047103400','36047107800',
         '36047109800','36047114201','36047114400','36047115000','36047116600','36047117800','36047118600','36047119000',
         '36047119200','36047119400','36047120800','36047990100',
         '36061000201','36061001402','36061001502','36061001600','36061001800','36061002201','36061002500','36061002900',
         '36061003900','36061004100','36061005400','36061006100','36061008603','36061009000','36061009900','36061010300',
         '36061010601','36061011100','36061012400','36061012700','36061013200','36061013400','36061013800','36061014300',
         '36061014700','36061015400','36061016100','36061016400','36061017000','36061017401','36061017402','36061017700',
         '36061018400','36061018900','36061019300','36061020600','36061020800','36061021000','36061021303','36061021500',
         '36061021703','36061022302','36061022400','36061022600','36061022700','36061022800','36061023000','36061023501',
         '36061023502','36061023801','36061023900','36061024200','36061024302','36061024500','36061024900','36061025500',
         '36061026900','36061027500','36061028300','36061029100','36061029500','36061029700','36061031100','36061031703',
         '36061031704',
         '36081000600','36081001600','36081003400','36081003600','36081004200','36081005800','36081006100','36081006501',
         '36081009100','36081010100','36081011300','36081012500','36081014100','36081014201','36081014202','36081014500',
         '36081015100','36081016900','36081018502','36081018700','36081021400','36081021900','36081022001','36081023200',
         '36081024000','36081029700','36081038100','36081038301','36081041300','36081041400','36081042400','36081042600',
         '36081043702','36081044301','36081046300','36081046400','36081047600','36081050202','36081053500','36081053900',
         '36081054500','36081055800','36081056500','36081058000','36081059100','36081060701','36081061200','36081061301',
         '36081061601','36081061900','36081062000','36081062300','36081062500','36081062700','36081063301','36081063700',
         '36081063800','36081064101','36081065000','36081065600','36081066100','36081068700','36081069702','36081071600',
         '36081072300','36081074700','36081074900','36081075702','36081077903','36081079300','36081083700','36081086500',
         '36081088400','36081091601','36081091602','36081096400','36081097202','36081097300','36081098700','36081099100',
         '36081099705','36081099900','36081100801','36081101002','36081101700','36081109300','36081111300','36081112900',
         '36081113300','36081114700','36081115100','36081115500','36081115900','36081117500','36081118100','36081118500',
         '36081121500','36081126700','36081129102','36081129103','36081138502','36081147100','36081147900','36081148300',
         '36081155101','36081155102','36081157101','36081157901','36081157902','36081990100',         
         '36085000300','36085000600','36085001100','36085001700','36085002001','36085002002','36085003300','36085003600',
         '36085003900','36085004000','36085004700','36085005000','36085005900','36085007400','36085009602','36085009700',
         '36085011201','36085011202','36085011401','36085011402','36085012100','36085012200','36085012804','36085012805',
         '36085013201','36085013203','36085013204','36085013400','36085013800','36085014604','36085014606','36085014700',
         '36085015100','36085015601','36085015603','36085016901','36085017007','36085017008','36085017009','36085017012',
         '36085017300','36085017700','36085018100','36085018702','36085018902','36085020804','36085022300','36085022600',
         '36085023100','36085023900','36085027301','36085027702','36085027704','36085029102','36085029103','36085031902',
         '36085032300']



## Load quadstate blokc point shapefile
#bkpt=gpd.read_file(path+'shp/quadstatebkpt.shp')
#bkpt.crs={'init': 'epsg:4326'}
#
## Set typical day
#typicaldate='2018/06/06'
#
## Create arrival time list
#arrivaltimeinterval=10 # in minutes
#arrivaltimestart='07:00:00'
#arrivaltimeend='10:00:00'
#arrivaltimestart=datetime.datetime.strptime(arrivaltimestart,'%H:%M:%S')
#arrivaltimeend=datetime.datetime.strptime(arrivaltimeend,'%H:%M:%S')
#arrivaltimeincrement=arrivaltimestart
#arrivaltime=[]
#while arrivaltimeincrement<=arrivaltimeend:
#    arrivaltime.append(datetime.datetime.strftime(arrivaltimeincrement,'%H:%M:%S'))
#    arrivaltimeincrement+=datetime.timedelta(seconds=arrivaltimeinterval*60)
#
## Set maximum number of transfers
#maxTransfers=3 # 4 boardings
#
## Set maximum walking distance
#maxWalkDistance=1000 # in meters
#
## Set cut off points between 0-120 mins
#cutoffinterval=2 # in minutes
#cutoffstart=0
#cutoffend=120
#cutoffincrement=cutoffstart
#cutoff=''
#while cutoffincrement<cutoffend:
#    cutoff+='&cutoffSec='+str((cutoffincrement+cutoffinterval)*60)
#    cutoffincrement+=cutoffinterval
#
## Definie res travelshed function to generate isochrones and spatial join to Census Blocks
#def restravelshed(arrt):
#    bk=bkpt.copy()
#    url='http://localhost:8801/otp/routers/default/isochrone?batch=true&mode=WALK,TRANSIT'
#    url+='&fromPlace='+destination.loc[i,'latlong']
#    url+='&date='+typicaldate+'&time='+arrt+'&maxTransfers='+str(maxTransfers)
#    url+='&maxWalkDistance='+str(maxWalkDistance)+'&clampInitialWait=0'+cutoff
#    headers={'Accept':'application/json'}  
#    req=requests.get(url=url,headers=headers)
#    js=req.json()
#    iso=gpd.GeoDataFrame.from_features(js,crs={'init': 'epsg:4326'})
#    bk['T'+arrt[0:2]+arrt[3:5]]=999
#    cut=range(cutoffend,cutoffstart,-cutoffinterval)
#    bkiso=gpd.sjoin(bk,iso.loc[iso['time']==cut[0]*60],how='left',op='within')
#    bkiso=bkiso.loc[pd.notnull(bkiso['time']),'blockid']
#    bk.loc[bk['blockid'].isin(bkiso),'T'+arrt[0:2]+arrt[3:5]]=cut[0]-cutoffinterval/2
#    for k in range(0,(len(cut)-1)):
#        if (iso.loc[iso['time']==cut[k+1]*60,'geometry'].notna()).bool():
#            if len(bk.loc[bk['T'+arrt[0:2]+arrt[3:5]]==cut[k]-cutoffinterval/2])!=0:
#                try:
#                    bkiso=gpd.sjoin(bk.loc[bk['T'+arrt[0:2]+arrt[3:5]]==cut[k]-cutoffinterval/2],
#                                    iso.loc[iso['time']==cut[k+1]*60],how='left',op='within')
#                    bkiso=bkiso.loc[pd.notnull(bkiso['time']),'blockid']
#                    bk.loc[bk['blockid'].isin(bkiso),'T'+arrt[0:2]+arrt[3:5]]=cut[k+1]-cutoffinterval/2
#                except ValueError:
#                    print(destination.loc[i,'id']+' '+arrt+' '+
#                          str(cut[k+1])+'-minute isochrone has no Census Block in it!')
#            else:
#                print(destination.loc[i,'id']+' '+arrt+' '+
#                      str(cut[k])+'-minute isochrone has no Census Block in it!')
#        else:
#            print(destination.loc[i,'id']+' '+arrt+' '+
#                  str(cut[k+1])+'-minute isochrone has no geometry!')
#    bk['T'+arrt[0:2]+arrt[3:5]]=bk['T'+arrt[0:2]+arrt[3:5]].replace(999,np.nan)
#    bk=bk.drop(['lat','long','geometry'],axis=1)
#    bk=bk.set_index('blockid')
#    return bk
#
## Definie work travelshed function to generate isochrones and spatial join to Census Blocks
#def worktravelshed(arrt):
#    bk=bkpt.copy()
#    url='http://localhost:8801/otp/routers/default/isochrone?batch=true&mode=WALK,TRANSIT'
#    url+='&fromPlace='+destination.loc[i,'latlong']+'&toPlace='+destination.loc[i,'latlong']
#    url+='&arriveBy=true&date='+typicaldate+'&time='+arrt+'&maxTransfers='+str(maxTransfers)
#    url+='&maxWalkDistance='+str(maxWalkDistance)+'&clampInitialWait=-1'+cutoff
#    headers={'Accept':'application/json'}  
#    req=requests.get(url=url,headers=headers)
#    js=req.json()
#    iso=gpd.GeoDataFrame.from_features(js,crs={'init': 'epsg:4326'})
#    bk['T'+arrt[0:2]+arrt[3:5]]=999
#    cut=range(cutoffend,cutoffstart,-cutoffinterval)
#    bkiso=gpd.sjoin(bk,iso.loc[iso['time']==cut[0]*60],how='left',op='within')
#    bkiso=bkiso.loc[pd.notnull(bkiso['time']),'blockid']
#    bk.loc[bk['blockid'].isin(bkiso),'T'+arrt[0:2]+arrt[3:5]]=cut[0]-cutoffinterval/2
#    for k in range(0,(len(cut)-1)):
#        if (iso.loc[iso['time']==cut[k+1]*60,'geometry'].notna()).bool():
#            if len(bk.loc[bk['T'+arrt[0:2]+arrt[3:5]]==cut[k]-cutoffinterval/2])!=0:
#                try:
#                    bkiso=gpd.sjoin(bk.loc[bk['T'+arrt[0:2]+arrt[3:5]]==cut[k]-cutoffinterval/2],
#                                    iso.loc[iso['time']==cut[k+1]*60],how='left',op='within')
#                    bkiso=bkiso.loc[pd.notnull(bkiso['time']),'blockid']
#                    bk.loc[bk['blockid'].isin(bkiso),'T'+arrt[0:2]+arrt[3:5]]=cut[k+1]-cutoffinterval/2
#                except ValueError:
#                    print(destination.loc[i,'id']+' '+arrt+' '+
#                          str(cut[k+1])+'-minute isochrone has no Census Block in it!')
#            else:
#                print(destination.loc[i,'id']+' '+arrt+' '+
#                      str(cut[k])+'-minute isochrone has no Census Block in it!')
#        else:
#            print(destination.loc[i,'id']+' '+arrt+' '+
#                  str(cut[k+1])+'-minute isochrone has no geometry!')
#    bk['T'+arrt[0:2]+arrt[3:5]]=bk['T'+arrt[0:2]+arrt[3:5]].replace(999,np.nan)
#    bk=bk.drop(['lat','long','geometry'],axis=1)
#    bk=bk.set_index('blockid')
#    return bk
#
#
## Define parallel multiprocessing function
#def parallelize(data, func):
#    data_split=np.array_split(data,np.ceil(len(data)/(mp.cpu_count()-4)))
#    pool=mp.Pool(mp.cpu_count()-4)
#    dt=pd.DataFrame()
#    for i in data_split:
#        ds=pd.concat(pool.map(func,i),axis=1)
#        dt=pd.concat([dt,ds],axis=1)
#    pool.close()
#    pool.join()
#    return dt

## Res
#if __name__=='__main__':
#    location=pd.read_excel(path+'nyctract/centroid/centroid.xlsx',sheet_name='nycrestractptadjfinal',dtype=str)
#    location=location[np.isin(location['censustract'],adjlist)].reset_index(drop=True)
#    location['id']=['ADJRES'+str(x).zfill(11) for x in location['censustract']]
#    location['latlong']=[str(x)+','+str(y) for x,y in zip(location['resintlatfinal'],location['resintlongfinal'])]
#    destination=location.loc[0:max(location.count())-1,['id','latlong']]
#    for i in destination.index:
#        df=parallelize(arrivaltime,restravelshed)
#        df['TTMEDIAN']=df.median(skipna=True,axis=1)
#        df=df['TTMEDIAN'].sort_index()
#        df.name=destination.loc[i,'id']
#        df.to_csv(path+'nyctract/res3/'+destination.loc[i,'id']+'.csv',index=True,header=True,na_rep=999)
#    # Join travelsheds to block shapefile
#    wtbk=gpd.read_file(path+'shp/quadstatebkclipped.shp')
#    wtbk.crs={'init': 'epsg:4326'}
#    wtbk=wtbk[['blockid','geometry']]    
#    for i in destination.index:
#        tp=pd.read_csv(path+'nyctract/res3/'+destination.loc[i,'id']+'.csv',dtype=str)
#        tp.iloc[:,1]=pd.to_numeric(tp.iloc[:,1])
#        wtbk=wtbk.merge(tp,on='blockid')
#    # Join travelsheds to tract shapefile
#    wtbk=wtbk.replace(999,np.nan)
#    loclist=wtbk.columns[1:]
#    wtbk['tractid']=[str(x)[0:11] for x in wtbk['blockid']]
#    wtbk=wtbk.groupby(['tractid'])[loclist].median(skipna=True)
#    wtbk=wtbk.replace(np.nan,999)
#    wtbk=wtbk.reset_index()
#    wtct=gpd.read_file(path+'shp/quadstatectclipped.shp')
#    wtct.crs={'init': 'epsg:4326'}
#    wtct=wtct[['tractid','geometry']]
#    wtct=wtct.merge(wtbk,on='tractid')
#    for i in destination.index:
#        # Create tract level map
#        wtctmap=wtct.loc[wtct[destination.loc[i,'id']]<=120,[destination.loc[i,'id'],'geometry']]
#        wtctmap=wtctmap.to_crs(epsg=3857)
#        fig,ax=plt.subplots(1,figsize=(11,8.5))
#        plt.subplots_adjust(left=0.05,right=0.95,top=0.95,bottom=0.05)
#        ax=wtctmap.plot(figsize=(11,8.5),edgecolor=None,column=destination.loc[i,'id'],cmap='Spectral',linewidth=0.2,ax=ax,alpha=0.7)
#        add_basemap(ax,zoom=11,url=ctx.sources.ST_TONER_LITE)
#        ax.set_axis_off()
#        ax.set_title('AM Peak Transit Travel Time (Minutes) from '+destination.loc[i,'id'],fontdict={'fontsize':'16','fontweight':'10'})
#        sm=plt.cm.ScalarMappable(cmap='Spectral',norm=plt.Normalize(vmin=1,vmax=120))
#        sm._A=[]
#        divider=mpl_toolkits.axes_grid1.make_axes_locatable(ax)
#        cax=divider.append_axes("right",size="3%",pad=0.2,aspect=25)
#        cbar=fig.colorbar(sm,cax=cax)
#        fig.tight_layout()
#        fig.savefig(path+'nyctract/res3/'+destination.loc[i,'id']+'ct.jpg', dpi=300)
#    print(datetime.datetime.now()-start)

## Work
#if __name__=='__main__':
#    location=pd.read_excel(path+'nyctract/centroid/centroid.xlsx',sheet_name='nycworktractptadjfinal',dtype=str)
#    location=location[np.isin(location['censustract'],adjlist)].reset_index(drop=True)
#    location['id']=['ADJWORK'+str(x).zfill(11) for x in location['censustract']]
#    location['latlong']=[str(x)+','+str(y) for x,y in zip(location['workintlatfinal'],location['workintlongfinal'])]
#    destination=location.loc[0:max(location.count())-1,['id','latlong']]
#    for i in destination.index:
#        df=parallelize(arrivaltime,worktravelshed)
#        df['TTMEDIAN']=df.median(skipna=True,axis=1)
#        df=df['TTMEDIAN'].sort_index()
#        df.name=destination.loc[i,'id']
#        df.to_csv(path+'nyctract/work3/'+destination.loc[i,'id']+'.csv',index=True,header=True,na_rep=999)
#    # Join travelsheds to block shapefile
#    wtbk=gpd.read_file(path+'shp/quadstatebkclipped.shp')
#    wtbk.crs={'init': 'epsg:4326'}
#    wtbk=wtbk[['blockid','geometry']]    
#    for i in destination.index:
#        tp=pd.read_csv(path+'nyctract/work3/'+destination.loc[i,'id']+'.csv',dtype=str)
#        tp.iloc[:,1]=pd.to_numeric(tp.iloc[:,1])
#        wtbk=wtbk.merge(tp,on='blockid')
#    # Join travelsheds to tract shapefile
#    wtbk=wtbk.replace(999,np.nan)
#    loclist=wtbk.columns[1:]
#    wtbk['tractid']=[str(x)[0:11] for x in wtbk['blockid']]
#    wtbk=wtbk.groupby(['tractid'])[loclist].median(skipna=True)
#    wtbk=wtbk.replace(np.nan,999)
#    wtbk=wtbk.reset_index()
#    wtct=gpd.read_file(path+'shp/quadstatectclipped.shp')
#    wtct.crs={'init': 'epsg:4326'}
#    wtct=wtct[['tractid','geometry']]
#    wtct=wtct.merge(wtbk,on='tractid')
#    for i in destination.index:
#        # Create tract level map
#        wtctmap=wtct.loc[wtct[destination.loc[i,'id']]<=120,[destination.loc[i,'id'],'geometry']]
#        wtctmap=wtctmap.to_crs(epsg=3857)
#        fig,ax=plt.subplots(1,figsize=(11,8.5))
#        plt.subplots_adjust(left=0.05,right=0.95,top=0.95,bottom=0.05)
#        ax=wtctmap.plot(figsize=(11,8.5),edgecolor=None,column=destination.loc[i,'id'],cmap='Spectral',linewidth=0.2,ax=ax,alpha=0.7)
#        add_basemap(ax,zoom=11,url=ctx.sources.ST_TONER_LITE)
#        ax.set_axis_off()
#        ax.set_title('AM Peak Transit Travel Time (Minutes) to '+destination.loc[i,'id'],fontdict={'fontsize':'16','fontweight':'10'})
#        sm=plt.cm.ScalarMappable(cmap='Spectral',norm=plt.Normalize(vmin=1,vmax=120))
#        sm._A=[]
#        divider=mpl_toolkits.axes_grid1.make_axes_locatable(ax)
#        cax=divider.append_axes("right",size="3%",pad=0.2,aspect=25)
#        cbar=fig.colorbar(sm,cax=cax)
#        fig.tight_layout()
#        fig.savefig(path+'nyctract/work3/'+destination.loc[i,'id']+'ct.jpg', dpi=300)
#    print(datetime.datetime.now()-start)



## Summarize travelshed outputs
## NYC Res Censust Blocks
#adjres=pd.DataFrame()
#for i in adjlist:
#    tp=pd.read_csv(path+'nyctract/res3/ADJRES'+i+'.csv',dtype=str)
#    tp=tp.set_index('blockid')
#    adjres=pd.concat([adjres,tp],axis=1)
#resbk=pd.read_csv(path+'nyctract/resbk2.csv',dtype=str)
#resbk=resbk.set_index('blockid')
#resloclist=resbk.columns
#resbk=pd.concat([resbk,adjres],axis=1)
#for i in adjlist:
#    resbk['RES'+i]=resbk['ADJRES'+i]
#resbk=resbk[resloclist]
#resbk.to_csv(path+'nyctract/resbk3.csv',index=True)

## NYC Res Censust Tracts
#adjresloclist=adjres.columns
#for i in adjres.columns:
#    adjres[i]=pd.to_numeric(adjres[i])
#adjres=adjres.replace(999,np.nan)
#adjres['tractid']=[str(x)[0:11] for x in adjres.index]
#adjres=adjres.groupby(['tractid'])[adjresloclist].median(skipna=True)
#resct=pd.read_csv(path+'nyctract/resct2.csv',dtype=str)
#resct=resct.set_index('tractid')
#resloclist=resct.columns
#for i in resct.columns:
#    resct[i]=pd.to_numeric(resct[i])
#resct=pd.concat([resct,adjres],axis=1)
#for i in adjlist:
#    resct['RES'+i]=resct['ADJRES'+i]
#resct=resct[resloclist]
#resct.to_csv(path+'nyctract/resct3.csv',index=True,na_rep='999')



## NYC Work Censust Blocks
#adjwork=pd.DataFrame()
#for i in adjlist:
#    tp=pd.read_csv(path+'nyctract/work3/ADJWORK'+i+'.csv',dtype=str)
#    tp=tp.set_index('blockid')
#    adjwork=pd.concat([adjwork,tp],axis=1)
#workbk=pd.read_csv(path+'nyctract/workbk2.csv',dtype=str)
#workbk=workbk.set_index('blockid')
#workloclist=workbk.columns
#workbk=pd.concat([workbk,adjwork],axis=1)
#for i in adjlist:
#    workbk['WORK'+i]=workbk['ADJWORK'+i]
#workbk=workbk[workloclist]
#workbk.to_csv(path+'nyctract/workbk3.csv',index=True)

## NYC Work Censust Tracts
#adjworkloclist=adjwork.columns
#for i in adjwork.columns:
#    adjwork[i]=pd.to_numeric(adjwork[i])
#adjwork=adjwork.replace(999,np.nan)
#adjwork['tractid']=[str(x)[0:11] for x in adjwork.index]
#adjwork=adjwork.groupby(['tractid'])[adjworkloclist].median(skipna=True)
#workct=pd.read_csv(path+'nyctract/workct2.csv',dtype=str)
#workct=workct.set_index('tractid')
#workloclist=workct.columns
#for i in workct.columns:
#    workct[i]=pd.to_numeric(workct[i])
#workct=pd.concat([workct,adjwork],axis=1)
#for i in adjlist:
#    workct['WORK'+i]=workct['ADJWORK'+i]
#workct=workct[workloclist]
#workct.to_csv(path+'nyctract/workct3.csv',index=True,na_rep='999')






























## Block Level Gravity Model
## Res Gravity
#resbkwac=pd.read_csv(path+'nyctract/resbk3.csv',dtype=str)
#resbkwac=resbkwac.set_index('blockid')
#resloclist=sorted(resbkwac.columns)
#wac=pd.DataFrame()
#for i in ['ct','nj','ny','pa']:
#    tp=pd.read_csv(path+'lehd/'+str(i)+'_wac_S000_JT03_2017.csv',dtype=str)
#    tp=tp[['w_geocode','C000']]
#    wac=pd.concat([wac,tp],axis=0)
#wac.columns=['blockid','wac']
#wac=wac.set_index('blockid')
#resbkwac=pd.merge(resbkwac,wac,how='left',left_index=True,right_index=True)
#resbkwac['wac']=resbkwac['wac'].replace(np.nan,'0')
#for i in resbkwac.columns:
#    resbkwac[i]=pd.to_numeric(resbkwac[i])
#for i in resloclist:
#    resbkwac[i]=np.where(resbkwac[i]<=5,2.5,
#                np.where(resbkwac[i]<=10,7.5,
#                np.where(resbkwac[i]<=15,12.5,
#                np.where(resbkwac[i]<=20,17.5,
#                np.where(resbkwac[i]<=25,22.5,
#                np.where(resbkwac[i]<=30,27.5,
#                np.where(resbkwac[i]<=35,32.5,
#                np.where(resbkwac[i]<=40,37.5,
#                np.where(resbkwac[i]<=45,42.5,
#                np.where(resbkwac[i]<=50,47.5,
#                np.where(resbkwac[i]<=55,52.5,
#                np.where(resbkwac[i]<=60,57.5,
#                np.where(resbkwac[i]<=65,62.5,
#                np.where(resbkwac[i]<=70,67.5,
#                np.where(resbkwac[i]<=75,72.5,
#                np.where(resbkwac[i]<=80,77.5,
#                np.where(resbkwac[i]<=85,82.5,
#                np.where(resbkwac[i]<=90,87.5,
#                np.where(resbkwac[i]<=95,92.5,
#                np.where(resbkwac[i]<=100,97.5,
#                np.where(resbkwac[i]<=105,102.5,
#                np.where(resbkwac[i]<=110,107.5,
#                np.where(resbkwac[i]<=115,112.5,
#                np.where(resbkwac[i]<=120,117.5,
#                np.nan))))))))))))))))))))))))
#resbkgravity=pd.DataFrame(index=resloclist,columns=['WAC1-5','WAC6-10','WAC11-15','WAC16-20','WAC21-25','WAC26-30',
#                                                    'WAC31-35','WAC36-40','WAC41-45','WAC46-50','WAC51-55','WAC56-60',
#                                                    'WAC61-65','WAC66-70','WAC71-75','WAC76-80','WAC81-85','WAC86-90',
#                                                    'WAC91-95','WAC96-100','WAC101-105','WAC106-110','WAC111-115','WAC116-120',
#                                                    'GWAC1-10','GWAC11-20','GWAC21-30','GWAC31-40','GWAC41-50','GWAC51-60',
#                                                    'GRAVITYWAC'])
#for i in resloclist:
#    resbkgravity.loc[i,'WAC1-5']=sum(resbkwac.loc[resbkwac[i]==2.5,'wac'])
#    resbkgravity.loc[i,'WAC6-10']=sum(resbkwac.loc[resbkwac[i]==7.5,'wac'])
#    resbkgravity.loc[i,'WAC11-15']=sum(resbkwac.loc[resbkwac[i]==12.5,'wac'])
#    resbkgravity.loc[i,'WAC16-20']=sum(resbkwac.loc[resbkwac[i]==17.5,'wac'])
#    resbkgravity.loc[i,'WAC21-25']=sum(resbkwac.loc[resbkwac[i]==22.5,'wac'])
#    resbkgravity.loc[i,'WAC26-30']=sum(resbkwac.loc[resbkwac[i]==27.5,'wac'])
#    resbkgravity.loc[i,'WAC31-35']=sum(resbkwac.loc[resbkwac[i]==32.5,'wac'])
#    resbkgravity.loc[i,'WAC36-40']=sum(resbkwac.loc[resbkwac[i]==37.5,'wac'])
#    resbkgravity.loc[i,'WAC41-45']=sum(resbkwac.loc[resbkwac[i]==42.5,'wac'])
#    resbkgravity.loc[i,'WAC46-50']=sum(resbkwac.loc[resbkwac[i]==47.5,'wac'])
#    resbkgravity.loc[i,'WAC51-55']=sum(resbkwac.loc[resbkwac[i]==52.5,'wac'])
#    resbkgravity.loc[i,'WAC56-60']=sum(resbkwac.loc[resbkwac[i]==57.5,'wac'])
#    resbkgravity.loc[i,'WAC61-65']=sum(resbkwac.loc[resbkwac[i]==62.5,'wac'])
#    resbkgravity.loc[i,'WAC66-70']=sum(resbkwac.loc[resbkwac[i]==67.5,'wac'])
#    resbkgravity.loc[i,'WAC71-75']=sum(resbkwac.loc[resbkwac[i]==72.5,'wac'])
#    resbkgravity.loc[i,'WAC76-80']=sum(resbkwac.loc[resbkwac[i]==77.5,'wac'])
#    resbkgravity.loc[i,'WAC81-85']=sum(resbkwac.loc[resbkwac[i]==82.5,'wac'])
#    resbkgravity.loc[i,'WAC86-90']=sum(resbkwac.loc[resbkwac[i]==87.5,'wac'])
#    resbkgravity.loc[i,'WAC91-95']=sum(resbkwac.loc[resbkwac[i]==92.5,'wac'])
#    resbkgravity.loc[i,'WAC96-100']=sum(resbkwac.loc[resbkwac[i]==97.5,'wac'])
#    resbkgravity.loc[i,'WAC101-105']=sum(resbkwac.loc[resbkwac[i]==102.5,'wac'])
#    resbkgravity.loc[i,'WAC106-110']=sum(resbkwac.loc[resbkwac[i]==107.5,'wac'])
#    resbkgravity.loc[i,'WAC111-115']=sum(resbkwac.loc[resbkwac[i]==112.5,'wac'])
#    resbkgravity.loc[i,'WAC116-120']=sum(resbkwac.loc[resbkwac[i]==117.5,'wac'])
#    resbkgravity.loc[i,'GWAC1-10']=(resbkgravity.loc[i,'WAC1-5']+resbkgravity.loc[i,'WAC6-10'])/(5**2)
#    resbkgravity.loc[i,'GWAC11-20']=(resbkgravity.loc[i,'WAC11-15']+resbkgravity.loc[i,'WAC16-20'])/(15**2)
#    resbkgravity.loc[i,'GWAC21-30']=(resbkgravity.loc[i,'WAC21-25']+resbkgravity.loc[i,'WAC26-30'])/(25**2)
#    resbkgravity.loc[i,'GWAC31-40']=(resbkgravity.loc[i,'WAC31-35']+resbkgravity.loc[i,'WAC36-40'])/(35**2)
#    resbkgravity.loc[i,'GWAC41-50']=(resbkgravity.loc[i,'WAC41-45']+resbkgravity.loc[i,'WAC46-50'])/(45**2)
#    resbkgravity.loc[i,'GWAC51-60']=(resbkgravity.loc[i,'WAC51-55']+resbkgravity.loc[i,'WAC56-60'])/(55**2)
#    resbkgravity.loc[i,'GRAVITYWAC']=resbkgravity.loc[i,'GWAC1-10']+resbkgravity.loc[i,'GWAC11-20']+resbkgravity.loc[i,'GWAC21-30']+resbkgravity.loc[i,'GWAC31-40']+resbkgravity.loc[i,'GWAC41-50']+resbkgravity.loc[i,'GWAC51-60']
#resbkgravity.to_csv(path+'nyctract/resbkgravity3.csv',index=True)



## Work Gravity
#adjworkbkrac=pd.DataFrame()
#for i in adjlist:
#    tp=pd.read_csv(path+'nyctract/work/ADJWORK'+i+'.csv',dtype=str)
#    tp=tp.set_index('blockid')
#    adjworkbkrac=pd.concat([adjworkbkrac,tp],axis=1)
#adjworkloclist=adjworkbkrac.columns
#rac=pd.DataFrame()
#for i in ['ct','nj','ny','pa']:
#    tp=pd.read_csv(path+'lehd/'+str(i)+'_rac_S000_JT03_2015.csv',dtype=str)
#    tp=tp[['h_geocode','C000']]
#    rac=pd.concat([rac,tp],axis=0)
#rac.columns=['blockid','rac']
#rac=rac.set_index('blockid')
#adjworkbkrac=pd.merge(adjworkbkrac,rac,how='left',left_index=True,right_index=True)
#adjworkbkrac['rac']=adjworkbkrac['rac'].replace(np.nan,'0')
#for i in adjworkbkrac.columns:
#    adjworkbkrac[i]=pd.to_numeric(adjworkbkrac[i])
#for i in adjworkloclist:
#    adjworkbkrac[i]=np.where(adjworkbkrac[i]<=10,5,
#                    np.where(adjworkbkrac[i]<=20,15,
#                    np.where(adjworkbkrac[i]<=30,25,
#                    np.where(adjworkbkrac[i]<=40,35,
#                    np.where(adjworkbkrac[i]<=50,45,
#                    np.where(adjworkbkrac[i]<=60,55,
#                    np.nan))))))
#adjworkbkgravity=pd.DataFrame(index=adjworkloclist,columns=['RAC1-10','RAC11-20','RAC21-30','RAC31-40','RAC41-50','RAC51-60',
#                                                            'GRAC1-10','GRAC11-20','GRAC21-30','GRAC31-40','GRAC41-50','GRAC51-60',
#                                                            'GRAVITYRAC'])
#for i in adjworkloclist:
#    tp=sum(adjworkbkrac.loc[adjworkbkrac[i]==5,'rac'])
#    adjworkbkgravity.loc[i,'RAC1-10']=tp
#    tp=sum(adjworkbkrac.loc[adjworkbkrac[i]==15,'rac'])
#    adjworkbkgravity.loc[i,'RAC11-20']=tp
#    tp=sum(adjworkbkrac.loc[adjworkbkrac[i]==25,'rac'])
#    adjworkbkgravity.loc[i,'RAC21-30']=tp
#    tp=sum(adjworkbkrac.loc[adjworkbkrac[i]==35,'rac'])
#    adjworkbkgravity.loc[i,'RAC31-40']=tp
#    tp=sum(adjworkbkrac.loc[adjworkbkrac[i]==45,'rac'])
#    adjworkbkgravity.loc[i,'RAC41-50']=tp
#    tp=sum(adjworkbkrac.loc[adjworkbkrac[i]==55,'rac'])
#    adjworkbkgravity.loc[i,'RAC51-60']=tp
#    adjworkbkgravity.loc[i,'GRAC1-10']=(adjworkbkgravity.loc[i,'RAC1-10'])/(5**2)
#    adjworkbkgravity.loc[i,'GRAC11-20']=(adjworkbkgravity.loc[i,'RAC11-20'])/(15**2)
#    adjworkbkgravity.loc[i,'GRAC21-30']=(adjworkbkgravity.loc[i,'RAC21-30'])/(25**2)
#    adjworkbkgravity.loc[i,'GRAC31-40']=(adjworkbkgravity.loc[i,'RAC31-40'])/(35**2)
#    adjworkbkgravity.loc[i,'GRAC41-50']=(adjworkbkgravity.loc[i,'RAC41-50'])/(45**2)
#    adjworkbkgravity.loc[i,'GRAC51-60']=(adjworkbkgravity.loc[i,'RAC51-60'])/(55**2)
#    adjworkbkgravity.loc[i,'GRAVITYRAC']=adjworkbkgravity.loc[i,'GRAC1-10']+adjworkbkgravity.loc[i,'GRAC11-20']+adjworkbkgravity.loc[i,'GRAC21-30']+adjworkbkgravity.loc[i,'GRAC31-40']+adjworkbkgravity.loc[i,'GRAC41-50']+adjworkbkgravity.loc[i,'GRAC51-60']
#workbkgravity=pd.read_csv(path+'nyctract/workbkgravity.csv',dtype=str)
#workbkgravity=workbkgravity.set_index('Unnamed: 0')
#for i in workbkgravity.columns:
#    workbkgravity[i]=pd.to_numeric(workbkgravity[i])
#for i in adjlist:
#    workbkgravity.loc['WORK'+i,:]=adjworkbkgravity.loc['ADJWORK'+i,:]
#workbkgravity.to_csv(path+'nyctract/workbkgravity2.csv',index=True)







# Tract Level Gravity Model
# Res Gravity
resctwac=pd.read_csv(path+'nyctract/resct3.csv',dtype=str)
resctwac=resctwac.set_index('tractid')
resloclist=sorted(resctwac.columns)
wac=pd.DataFrame()
for i in ['ct','nj','ny','pa']:
    tp=pd.read_csv(path+'lehd/'+str(i)+'_wac_S000_JT03_2017.csv',dtype=str)
    tp=tp[['w_geocode','C000']]
    wac=pd.concat([wac,tp],axis=0)
wac.columns=['blockid','wac']
wac['tractid']=[str(x)[0:11] for x in wac['blockid']]
wac['wac']=pd.to_numeric(wac['wac'])
wac=pd.DataFrame(wac.groupby('tractid')['wac'].sum())
resctwac=pd.merge(resctwac,wac,how='left',left_index=True,right_index=True)
resctwac['wac']=resctwac['wac'].replace(np.nan,'0')
for i in resctwac.columns:
    resctwac[i]=pd.to_numeric(resctwac[i])
for i in resloclist:
    resctwac[i]=np.where(resctwac[i]<=5,2.5,
                np.where(resctwac[i]<=10,7.5,
                np.where(resctwac[i]<=15,12.5,
                np.where(resctwac[i]<=20,17.5,
                np.where(resctwac[i]<=25,22.5,
                np.where(resctwac[i]<=30,27.5,
                np.where(resctwac[i]<=35,32.5,
                np.where(resctwac[i]<=40,37.5,
                np.where(resctwac[i]<=45,42.5,
                np.where(resctwac[i]<=50,47.5,
                np.where(resctwac[i]<=55,52.5,
                np.where(resctwac[i]<=60,57.5,
                np.where(resctwac[i]<=65,62.5,
                np.where(resctwac[i]<=70,67.5,
                np.where(resctwac[i]<=75,72.5,
                np.where(resctwac[i]<=80,77.5,
                np.where(resctwac[i]<=85,82.5,
                np.where(resctwac[i]<=90,87.5,
                np.where(resctwac[i]<=95,92.5,
                np.where(resctwac[i]<=100,97.5,
                np.where(resctwac[i]<=105,102.5,
                np.where(resctwac[i]<=110,107.5,
                np.where(resctwac[i]<=115,112.5,
                np.where(resctwac[i]<=120,117.5,
                np.nan))))))))))))))))))))))))
resctgravity=pd.DataFrame(index=resloclist,columns=['WAC1-5','WAC6-10','WAC11-15','WAC16-20','WAC21-25','WAC26-30',
                                                    'WAC31-35','WAC36-40','WAC41-45','WAC46-50','WAC51-55','WAC56-60',
                                                    'WAC61-65','WAC66-70','WAC71-75','WAC76-80','WAC81-85','WAC86-90',
                                                    'WAC91-95','WAC96-100','WAC101-105','WAC106-110','WAC111-115','WAC116-120',
                                                    'GWAC1-10','GWAC11-20','GWAC21-30','GWAC31-40','GWAC41-50','GWAC51-60',
                                                    'GRAVITYWAC'])
for i in resloclist:
    resctgravity.loc[i,'WAC1-5']=sum(resctwac.loc[resctwac[i]==2.5,'wac'])
    resctgravity.loc[i,'WAC6-10']=sum(resctwac.loc[resctwac[i]==7.5,'wac'])
    resctgravity.loc[i,'WAC11-15']=sum(resctwac.loc[resctwac[i]==12.5,'wac'])
    resctgravity.loc[i,'WAC16-20']=sum(resctwac.loc[resctwac[i]==17.5,'wac'])
    resctgravity.loc[i,'WAC21-25']=sum(resctwac.loc[resctwac[i]==22.5,'wac'])
    resctgravity.loc[i,'WAC26-30']=sum(resctwac.loc[resctwac[i]==27.5,'wac'])
    resctgravity.loc[i,'WAC31-35']=sum(resctwac.loc[resctwac[i]==32.5,'wac'])
    resctgravity.loc[i,'WAC36-40']=sum(resctwac.loc[resctwac[i]==37.5,'wac'])
    resctgravity.loc[i,'WAC41-45']=sum(resctwac.loc[resctwac[i]==42.5,'wac'])
    resctgravity.loc[i,'WAC46-50']=sum(resctwac.loc[resctwac[i]==47.5,'wac'])
    resctgravity.loc[i,'WAC51-55']=sum(resctwac.loc[resctwac[i]==52.5,'wac'])
    resctgravity.loc[i,'WAC56-60']=sum(resctwac.loc[resctwac[i]==57.5,'wac'])
    resctgravity.loc[i,'WAC61-65']=sum(resctwac.loc[resctwac[i]==62.5,'wac'])
    resctgravity.loc[i,'WAC66-70']=sum(resctwac.loc[resctwac[i]==67.5,'wac'])
    resctgravity.loc[i,'WAC71-75']=sum(resctwac.loc[resctwac[i]==72.5,'wac'])
    resctgravity.loc[i,'WAC76-80']=sum(resctwac.loc[resctwac[i]==77.5,'wac'])
    resctgravity.loc[i,'WAC81-85']=sum(resctwac.loc[resctwac[i]==82.5,'wac'])
    resctgravity.loc[i,'WAC86-90']=sum(resctwac.loc[resctwac[i]==87.5,'wac'])
    resctgravity.loc[i,'WAC91-95']=sum(resctwac.loc[resctwac[i]==92.5,'wac'])
    resctgravity.loc[i,'WAC96-100']=sum(resctwac.loc[resctwac[i]==97.5,'wac'])
    resctgravity.loc[i,'WAC101-105']=sum(resctwac.loc[resctwac[i]==102.5,'wac'])
    resctgravity.loc[i,'WAC106-110']=sum(resctwac.loc[resctwac[i]==107.5,'wac'])
    resctgravity.loc[i,'WAC111-115']=sum(resctwac.loc[resctwac[i]==112.5,'wac'])
    resctgravity.loc[i,'WAC116-120']=sum(resctwac.loc[resctwac[i]==117.5,'wac'])
    resctgravity.loc[i,'GWAC1-10']=(resctgravity.loc[i,'WAC1-5']+resctgravity.loc[i,'WAC6-10'])/(5**2)
    resctgravity.loc[i,'GWAC11-20']=(resctgravity.loc[i,'WAC11-15']+resctgravity.loc[i,'WAC16-20'])/(15**2)
    resctgravity.loc[i,'GWAC21-30']=(resctgravity.loc[i,'WAC21-25']+resctgravity.loc[i,'WAC26-30'])/(25**2)
    resctgravity.loc[i,'GWAC31-40']=(resctgravity.loc[i,'WAC31-35']+resctgravity.loc[i,'WAC36-40'])/(35**2)
    resctgravity.loc[i,'GWAC41-50']=(resctgravity.loc[i,'WAC41-45']+resctgravity.loc[i,'WAC46-50'])/(45**2)
    resctgravity.loc[i,'GWAC51-60']=(resctgravity.loc[i,'WAC51-55']+resctgravity.loc[i,'WAC56-60'])/(55**2)
    resctgravity.loc[i,'GRAVITYWAC']=resctgravity.loc[i,'GWAC1-10']+resctgravity.loc[i,'GWAC11-20']+resctgravity.loc[i,'GWAC21-30']+resctgravity.loc[i,'GWAC31-40']+resctgravity.loc[i,'GWAC41-50']+resctgravity.loc[i,'GWAC51-60']
resctgravity.to_csv(path+'nyctract/resctgravity3.csv',index=True)






# Work Gravity
workctrac=pd.read_csv(path+'nyctract/workct3.csv',dtype=str)
workctrac=workctrac.set_index('tractid')
workloclist=sorted(workctrac.columns)
rac=pd.DataFrame()
for i in ['ct','nj','ny','pa']:
    tp=pd.read_csv(path+'lehd/'+str(i)+'_rac_S000_JT03_2017.csv',dtype=str)
    tp=tp[['h_geocode','C000']]
    rac=pd.concat([rac,tp],axis=0)
rac.columns=['blockid','rac']
rac['tractid']=[str(x)[0:11] for x in rac['blockid']]
rac['rac']=pd.to_numeric(rac['rac'])
rac=pd.DataFrame(rac.groupby('tractid')['rac'].sum())
workctrac=pd.merge(workctrac,rac,how='left',left_index=True,right_index=True)
workctrac['rac']=workctrac['rac'].replace(np.nan,'0')
for i in workctrac.columns:
    workctrac[i]=pd.to_numeric(workctrac[i])
for i in workloclist:
    workctrac[i]=np.where(workctrac[i]<=5,2.5,
                 np.where(workctrac[i]<=10,7.5,
                 np.where(workctrac[i]<=15,12.5,
                 np.where(workctrac[i]<=20,17.5,
                 np.where(workctrac[i]<=25,22.5,
                 np.where(workctrac[i]<=30,27.5,
                 np.where(workctrac[i]<=35,32.5,
                 np.where(workctrac[i]<=40,37.5,
                 np.where(workctrac[i]<=45,42.5,
                 np.where(workctrac[i]<=50,47.5,
                 np.where(workctrac[i]<=55,52.5,
                 np.where(workctrac[i]<=60,57.5,
                 np.where(workctrac[i]<=65,62.5,
                 np.where(workctrac[i]<=70,67.5,
                 np.where(workctrac[i]<=75,72.5,
                 np.where(workctrac[i]<=80,77.5,
                 np.where(workctrac[i]<=85,82.5,
                 np.where(workctrac[i]<=90,87.5,
                 np.where(workctrac[i]<=95,92.5,
                 np.where(workctrac[i]<=100,97.5,
                 np.where(workctrac[i]<=105,102.5,
                 np.where(workctrac[i]<=110,107.5,
                 np.where(workctrac[i]<=115,112.5,
                 np.where(workctrac[i]<=120,117.5,
                 np.nan))))))))))))))))))))))))
workctgravity=pd.DataFrame(index=workloclist,columns=['RAC1-5','RAC6-10','RAC11-15','RAC16-20','RAC21-25','RAC26-30',
                                                      'RAC31-35','RAC36-40','RAC41-45','RAC46-50','RAC51-55','RAC56-60',
                                                      'RAC61-65','RAC66-70','RAC71-75','RAC76-80','RAC81-85','RAC86-90',
                                                      'RAC91-95','RAC96-100','RAC101-105','RAC106-110','RAC111-115','RAC116-120',
                                                      'GRAC1-10','GRAC11-20','GRAC21-30','GRAC31-40','GRAC41-50','GRAC51-60',
                                                      'GRAVITYRAC'])
for i in workloclist:
    workctgravity.loc[i,'RAC1-5']=sum(workctrac.loc[workctrac[i]==2.5,'rac'])
    workctgravity.loc[i,'RAC6-10']=sum(workctrac.loc[workctrac[i]==7.5,'rac'])
    workctgravity.loc[i,'RAC11-15']=sum(workctrac.loc[workctrac[i]==12.5,'rac'])
    workctgravity.loc[i,'RAC16-20']=sum(workctrac.loc[workctrac[i]==17.5,'rac'])
    workctgravity.loc[i,'RAC21-25']=sum(workctrac.loc[workctrac[i]==22.5,'rac'])
    workctgravity.loc[i,'RAC26-30']=sum(workctrac.loc[workctrac[i]==27.5,'rac'])
    workctgravity.loc[i,'RAC31-35']=sum(workctrac.loc[workctrac[i]==32.5,'rac'])
    workctgravity.loc[i,'RAC36-40']=sum(workctrac.loc[workctrac[i]==37.5,'rac'])
    workctgravity.loc[i,'RAC41-45']=sum(workctrac.loc[workctrac[i]==42.5,'rac'])
    workctgravity.loc[i,'RAC46-50']=sum(workctrac.loc[workctrac[i]==47.5,'rac'])
    workctgravity.loc[i,'RAC51-55']=sum(workctrac.loc[workctrac[i]==52.5,'rac'])
    workctgravity.loc[i,'RAC56-60']=sum(workctrac.loc[workctrac[i]==57.5,'rac'])
    workctgravity.loc[i,'RAC61-65']=sum(workctrac.loc[workctrac[i]==62.5,'rac'])
    workctgravity.loc[i,'RAC66-70']=sum(workctrac.loc[workctrac[i]==67.5,'rac'])
    workctgravity.loc[i,'RAC71-75']=sum(workctrac.loc[workctrac[i]==72.5,'rac'])
    workctgravity.loc[i,'RAC76-80']=sum(workctrac.loc[workctrac[i]==77.5,'rac'])
    workctgravity.loc[i,'RAC81-85']=sum(workctrac.loc[workctrac[i]==82.5,'rac'])
    workctgravity.loc[i,'RAC86-90']=sum(workctrac.loc[workctrac[i]==87.5,'rac'])
    workctgravity.loc[i,'RAC91-95']=sum(workctrac.loc[workctrac[i]==92.5,'rac'])
    workctgravity.loc[i,'RAC96-100']=sum(workctrac.loc[workctrac[i]==97.5,'rac'])
    workctgravity.loc[i,'RAC101-105']=sum(workctrac.loc[workctrac[i]==102.5,'rac'])
    workctgravity.loc[i,'RAC106-110']=sum(workctrac.loc[workctrac[i]==107.5,'rac'])
    workctgravity.loc[i,'RAC111-115']=sum(workctrac.loc[workctrac[i]==112.5,'rac'])
    workctgravity.loc[i,'RAC116-120']=sum(workctrac.loc[workctrac[i]==117.5,'rac'])
    workctgravity.loc[i,'GRAC1-10']=(workctgravity.loc[i,'RAC1-5']+workctgravity.loc[i,'RAC6-10'])/(5**2)
    workctgravity.loc[i,'GRAC11-20']=(workctgravity.loc[i,'RAC11-15']+workctgravity.loc[i,'RAC16-20'])/(15**2)
    workctgravity.loc[i,'GRAC21-30']=(workctgravity.loc[i,'RAC21-25']+workctgravity.loc[i,'RAC26-30'])/(25**2)
    workctgravity.loc[i,'GRAC31-40']=(workctgravity.loc[i,'RAC31-35']+workctgravity.loc[i,'RAC36-40'])/(35**2)
    workctgravity.loc[i,'GRAC41-50']=(workctgravity.loc[i,'RAC41-45']+workctgravity.loc[i,'RAC46-50'])/(45**2)
    workctgravity.loc[i,'GRAC51-60']=(workctgravity.loc[i,'RAC51-55']+workctgravity.loc[i,'RAC56-60'])/(55**2)
    workctgravity.loc[i,'GRAVITYRAC']=workctgravity.loc[i,'GRAC1-10']+workctgravity.loc[i,'GRAC11-20']+workctgravity.loc[i,'GRAC21-30']+workctgravity.loc[i,'GRAC31-40']+workctgravity.loc[i,'GRAC41-50']+workctgravity.loc[i,'GRAC51-60']
workctgravity.to_csv(path+'nyctract/workctgravity3.csv',index=True)







